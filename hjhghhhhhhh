game:GetService("StarterGui"):SetCore("SendNotification", { 
	Title = "Wait";
	Text = "";
	Icon = "rbxthumb://type=Asset&id=11774242795&w=150&h=150"})
Duration = 16;

game.Players.LocalPlayer.Character.Head.Mesh:Remove()
wait(0.1)

--reanimate by MyWorld#4430 discord.gg/pYVHtSJmEY
--the code that looks trash and works great
local healthHide = false --moves your head away every 3 seconds so players dont see your health bar (alignmode 4 only)
local reclaim = true --if you lost control over a part this will move your primary part to the part so you get it back (alignmode 4)
local novoid = true --prevents parts from going under workspace.FallenPartsDestroyHeight if you control them (alignmode 4 only)
local physp = nil --PhysicalProperties.new(0.01, 0, 1, 0, 0) --sets .CustomPhysicalProperties to this for each part
local noclipAllParts = true --set it to true if you want noclip
local antiragdoll = true --removes hingeConstraints and ballSocketConstraints from your character
local newanimate = true --disables the animate script and enables after reanimation
local discharscripts = true --disables all localScripts parented to your character before reanimation
local R15toR6 = true --tries to convert your character to r6 if its r15
local hatcollide = false --makes hats cancollide (credit to ShownApe) (works only with reanimate method 0)
local humState16 = true --enables collisions for limbs before the humanoid dies (using hum:ChangeState)
local addtools = false --puts all tools from backpack to character and lets you hold them after reanimation
local hedafterneck = true --disable aligns for head and enable after neck or torso is removed
local simrad = 1000 --simulation radius with sethiddenproperty (nil to disable)
local loadtime = game:GetService("Players").RespawnTime + 0.5 --anti respawn delay
local method = 3 --reanimation method
--methods:
--0 - breakJoints (takes [loadtime] seconds to load)
--1 - limbs
--2 - limbs + anti respawn
--3 - limbs + breakJoints after [loadtime] seconds
--4 - remove humanoid + breakJoints
--5 - remove humanoid + limbs
local alignmode = 4 --AlignPosition mode
--modes:
--1 - AlignPosition rigidity enabled true
--2 - 2 AlignPositions rigidity enabled both true and false
--3 - AlignPosition rigidity enabled false
--4 - no AlignPosition, CFrame only
local flingpart = "HumanoidRootPart" --name of the part or the hat used for flinging
--the fling function
--usage: fling(target, duration, velocity)
--target can be set to: basePart, CFrame, Vector3, character model or humanoid (flings at mouse.Hit if argument not provided)
--duration (fling time in seconds) can be set to a number or a string convertable to a number (0.5s if not provided)
--velocity (fling part rotation velocity) can be set to a vector3 value (Vector3.new(20000, 20000, 20000) if not provided)

local lp = game:GetService("Players").LocalPlayer
local rs, ws, sg = game:GetService("RunService"), game:GetService("Workspace"), game:GetService("StarterGui")
local stepped, heartbeat, renderstepped = rs.Stepped, rs.Heartbeat, rs.RenderStepped
local twait, tdelay, rad, inf, abs, mclamp = task.wait, task.delay, math.rad, math.huge, math.abs, math.clamp
local cf, v3, angles = CFrame.new, Vector3.new, CFrame.Angles
local v3_0, cf_0 = v3(0, 0, 0), cf(0, 0, 0)

local c = lp.Character
if not (c and c.Parent) then
    return
end

c:GetPropertyChangedSignal("Parent"):Connect(function()
    if not (c and c.Parent) then
        c = nil
    end
end)

local destroy = c.Destroy

local function gp(parent, name, className)
    if typeof(parent) == "Instance" then
        for i, v in pairs(parent:GetChildren()) do
            if (v.Name == name) and v:IsA(className) then
                return v
            end
        end
    end
    return nil
end

local v3_xz, v3_net = v3(8, 0, 8), v3(0.1, 25.1, 0.1)
local function getNetlessVelocity(realPartVelocity) --edit this if you have a better netless method
    if realPartVelocity.Magnitude < 0.1 then return v3_net end
    return realPartVelocity * v3_xz + v3_net
end

if type(simrad) == "number" then
    local shp = getfenv().sethiddenproperty
    if shp then
        local con = nil
        con = heartbeat:Connect(function()
            if not c then return con:Disconnect() end
            shp(lp, "SimulationRadius", simrad)
        end)
    end
end

healthHide = healthHide and ((method == 0) or (method == 2) or (method == 3)) and gp(c, "Head", "BasePart")

local reclaim, lostpart = reclaim and c.PrimaryPart, nil

local v3_hide = v3(0, 3000, 0)
local function align(Part0, Part1)
    
    local att0 = Instance.new("Attachment")
    att0.Position, att0.Orientation, att0.Name = v3_0, v3_0, "att0_" .. Part0.Name
    local att1 = Instance.new("Attachment")
    att1.Position, att1.Orientation, att1.Name = v3_0, v3_0, "att1_" .. Part1.Name

    if alignmode == 4 then
    
        local hide = false
        if Part0 == healthHide then
            healthHide = false
            tdelay(0, function()
                while twait(2.9) and Part0 and c do
                    hide = #Part0:GetConnectedParts() == 1
                    twait(0.1)
                    hide = false
                end
            end)
        end
        
        local rot = rad(0.05)
        local con0, con1 = nil, nil
        con0 = stepped:Connect(function()
            if not (Part0 and Part1) then return con0:Disconnect() and con1:Disconnect() end
            Part0.RotVelocity = Part1.RotVelocity
        end)
        local lastpos, vel = Part0.Position, Part0.Velocity
        con1 = heartbeat:Connect(function(delta)
            if not (Part0 and Part1 and att1) then return con0:Disconnect() and con1:Disconnect() end
            if (not Part0.Anchored) and (Part0.ReceiveAge == 0) then
                if lostpart == Part0 then
                    lostpart = nil
                end
                local newcf = Part1.CFrame * att1.CFrame
                local vel = (newcf.Position - lastpos) / delta
                Part0.Velocity = getNetlessVelocity(vel)
                if vel.Magnitude < 1 then
                    rot = -rot
                    newcf *= angles(0, 0, rot)
                end
                lastpos = newcf.Position
                if lostpart and (Part0 == reclaim) then
                    newcf = lostpart.CFrame
                elseif hide then
                    newcf += v3_hide
                end
                if novoid and (newcf.Y < ws.FallenPartsDestroyHeight + 0.1) then
                    newcf += v3(0, ws.FallenPartsDestroyHeight + 0.1 - newcf.Y, 0)
                end
                Part0.CFrame = newcf
            elseif (not Part0.Anchored) and (abs(Part0.Velocity.X) < 45) and (abs(Part0.Velocity.Y) < 25) and (abs(Part0.Velocity.Z) < 45) then
                lostpart = Part0
            end
        end)
    
    else
        
        Part0.CustomPhysicalProperties = physp
        if (alignmode == 1) or (alignmode == 2) then
            local ape = Instance.new("AlignPosition")
            ape.MaxForce, ape.MaxVelocity, ape.Responsiveness = inf, inf, inf
            ape.ReactionForceEnabled, ape.RigidityEnabled, ape.ApplyAtCenterOfMass = false, true, false
            ape.Attachment0, ape.Attachment1, ape.Name = att0, att1, "AlignPositionRtrue"
            ape.Parent = att0
        end
        
        if (alignmode == 2) or (alignmode == 3) then
            local apd = Instance.new("AlignPosition")
            apd.MaxForce, apd.MaxVelocity, apd.Responsiveness = inf, inf, inf
            apd.ReactionForceEnabled, apd.RigidityEnabled, apd.ApplyAtCenterOfMass = false, false, false
            apd.Attachment0, apd.Attachment1, apd.Name = att0, att1, "AlignPositionRfalse"
            apd.Parent = att0
        end
        
        
        
        
        local con0, con1 = nil, nil
        local vel = Part0.Velocity
        con0 = renderstepped:Connect(function()
            if not (Part0 and Part1) then return con0:Disconnect() and con1:Disconnect() end
            Part0.Velocity = framevel
        end)
        local lastpos = Part0.Position
        con1 = heartbeat:Connect(function(delta)
            if not (Part0 and Part1) then return con0:Disconnect() and con1:Disconnect() end
            vel = Part0.Velocity
            Part0.Velocity = getNetlessVelocity((Part1.Position - lastpos) / delta)
            lastpos = Part1.Position
        end)
    
    end

    att0:GetPropertyChangedSignal("Parent"):Connect(function()
        Part0 = att0.Parent
        if not Part0:IsA("BasePart") then
            att0 = nil
            if lostpart == Part0 then
                lostpart = nil
            end
            Part0 = nil
        end
    end)
    att0.Parent = Part0
    
    att1:GetPropertyChangedSignal("Parent"):Connect(function()
        Part1 = att1.Parent
        if not Part1:IsA("BasePart") then
            att1 = nil
            Part1 = nil
        end
    end)
    att1.Parent = Part1
end

local function respawnrequest()
    local ccfr, c = ws.CurrentCamera.CFrame, lp.Character
    lp.Character = nil
    lp.Character = c
    local con = nil
    con = ws.CurrentCamera.Changed:Connect(function(prop)
        if (prop ~= "Parent") and (prop ~= "CFrame") then
            return
        end
        ws.CurrentCamera.CFrame = ccfr
        con:Disconnect()
    end)
end

local destroyhum = (method == 4) or (method == 5)
local breakjoints = (method == 0) or (method == 4)
local antirespawn = (method == 0) or (method == 2) or (method == 3)

hatcollide = hatcollide and (method == 0)

addtools = addtools and lp:FindFirstChildOfClass("Backpack")

if antiragdoll then
    antiragdoll = function(v)
        if v:IsA("HingeConstraint") or v:IsA("BallSocketConstraint") then
            v.Parent = nil
        end
    end
    for i, v in pairs(c:GetDescendants()) do
        antiragdoll(v)
    end
    c.DescendantAdded:Connect(antiragdoll)
end

if antirespawn then
    respawnrequest()
end

if method == 0 then
    twait(loadtime)
    if not c then
        return
    end
end

if discharscripts then
    for i, v in pairs(c:GetDescendants()) do
        if v:IsA("LocalScript") then
            v.Disabled = true
        end
    end
elseif newanimate then
    local animate = gp(c, "Animate", "LocalScript")
    if animate and (not animate.Disabled) then
        animate.Disabled = true
    else
        newanimate = false
    end
end

if addtools then
    for i, v in pairs(addtools:GetChildren()) do
        if v:IsA("Tool") then
            v.Parent = c
        end
    end
end

pcall(function()
    settings().Physics.AllowSleep = false
    settings().Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Disabled
end)

local OLDscripts = {}

for i, v in pairs(c:GetDescendants()) do
    if v.ClassName == "Script" then
        OLDscripts[v.Name] = true
    end
end

local scriptNames = {}

for i, v in pairs(c:GetDescendants()) do
    if v:IsA("BasePart") then
        local newName, exists = tostring(i), true
        while exists do
            exists = OLDscripts[newName]
            if exists then
                newName = newName .. "_"    
            end
        end
        table.insert(scriptNames, newName)
        Instance.new("Script", v).Name = newName
    end
end

local hum = c:FindFirstChildOfClass("Humanoid")
if hum then
    for i, v in pairs(hum:GetPlayingAnimationTracks()) do
        v:Stop()
    end
end
c.Archivable = true
local cl = c:Clone()
if hum and humState16 then
    hum:ChangeState(Enum.HumanoidStateType.Physics)
    if destroyhum then
        twait(1.6)
    end
end
if destroyhum then
    pcall(destroy, hum)
end

if not c then
    return
end

local head, torso, root = gp(c, "Head", "BasePart"), gp(c, "Torso", "BasePart") or gp(c, "UpperTorso", "BasePart"), gp(c, "HumanoidRootPart", "BasePart")
if hatcollide then
    pcall(destroy, torso)
    pcall(destroy, root)
    pcall(destroy, c:FindFirstChildOfClass("BodyColors") or gp(c, "Health", "Script"))
end

local model = Instance.new("Model", c)
model:GetPropertyChangedSignal("Parent"):Connect(function()
    if not (model and model.Parent) then
        model = nil
    end
end)

for i, v in pairs(c:GetChildren()) do
    if v ~= model then
        if addtools and v:IsA("Tool") then
            for i1, v1 in pairs(v:GetDescendants()) do
                if v1 and v1.Parent and v1:IsA("BasePart") then
                    local bv = Instance.new("BodyVelocity")
                    bv.Velocity, bv.MaxForce, bv.P, bv.Name = v3_0, v3(1000, 1000, 1000), 1250, "bv_" .. v.Name
                    bv.Parent = v1
                end
            end
        end
        v.Parent = model
    end
end

if breakjoints then
    model:BreakJoints()
else
    if head and torso then
        for i, v in pairs(model:GetDescendants()) do
            if v:IsA("JointInstance") then
                local save = false
                if (v.Part0 == torso) and (v.Part1 == head) then
                    save = true
                end
                if (v.Part0 == head) and (v.Part1 == torso) then
                    save = true
                end
                if save then
                    if hedafterneck then
                        hedafterneck = v
                    end
                else
                    pcall(destroy, v)
                end
            end
        end
    end
    if method == 3 then
        task.delay(loadtime, pcall, model.BreakJoints, model)
    end
end

cl.Parent = ws
for i, v in pairs(cl:GetChildren()) do
    v.Parent = c
end
pcall(destroy, cl)

local uncollide, noclipcon = nil, nil
if noclipAllParts then
    uncollide = function()
        if c then
            for i, v in pairs(c:GetDescendants()) do
                if v:IsA("BasePart") then
                    v.CanCollide = false
                end
            end
        else
            noclipcon:Disconnect()
        end
    end
else
    uncollide = function()
        if model then
            for i, v in pairs(model:GetDescendants()) do
                if v:IsA("BasePart") then
                    v.CanCollide = false
                end
            end
        else
            noclipcon:Disconnect()
        end
    end
end
noclipcon = stepped:Connect(uncollide)
uncollide()

for i, scr in pairs(model:GetDescendants()) do
    if (scr.ClassName == "Script") and table.find(scriptNames, scr.Name) then
        local Part0 = scr.Parent
        if Part0:IsA("BasePart") then
            for i1, scr1 in pairs(c:GetDescendants()) do
                if (scr1.ClassName == "Script") and (scr1.Name == scr.Name) and (not scr1:IsDescendantOf(model)) then
                    local Part1 = scr1.Parent
                    if (Part1.ClassName == Part0.ClassName) and (Part1.Name == Part0.Name) then
                        align(Part0, Part1)
                        pcall(destroy, scr)
                        pcall(destroy, scr1)
                        break
                    end
                end
            end
        end
    end
end

for i, v in pairs(c:GetDescendants()) do
    if v and v.Parent and (not v:IsDescendantOf(model)) then
        if v:IsA("Decal") then
            v.Transparency = 1
        elseif v:IsA("BasePart") then
            v.Transparency = 1
            v.Anchored = false
        elseif v:IsA("ForceField") then
            v.Visible = false
        elseif v:IsA("Sound") then
            v.Playing = false
        elseif v:IsA("BillboardGui") or v:IsA("SurfaceGui") or v:IsA("ParticleEmitter") or v:IsA("Fire") or v:IsA("Smoke") or v:IsA("Sparkles") then
            v.Enabled = false
        end
    end
end

if newanimate then
    local animate = gp(c, "Animate", "LocalScript")
    if animate then
        animate.Disabled = false
    end
end

if addtools then
    for i, v in pairs(c:GetChildren()) do
        if v:IsA("Tool") then
            v.Parent = addtools
        end
    end
end

local hum0, hum1 = model:FindFirstChildOfClass("Humanoid"), c:FindFirstChildOfClass("Humanoid")
if hum0 then
    hum0:GetPropertyChangedSignal("Parent"):Connect(function()
        if not (hum0 and hum0.Parent) then
            hum0 = nil
        end
    end)
end
if hum1 then
    hum1:GetPropertyChangedSignal("Parent"):Connect(function()
        if not (hum1 and hum1.Parent) then
            hum1 = nil
        end
    end)

    ws.CurrentCamera.CameraSubject = hum1
    local camSubCon = nil
    local function camSubFunc()
        camSubCon:Disconnect()
        if c and hum1 then
            ws.CurrentCamera.CameraSubject = hum1
        end
    end
    camSubCon = renderstepped:Connect(camSubFunc)
    if hum0 then
        hum0:GetPropertyChangedSignal("Jump"):Connect(function()
            if hum1 then
                hum1.Jump = hum0.Jump
            end
        end)
    else
        respawnrequest()
    end
end

local rb = Instance.new("BindableEvent", c)
rb.Event:Connect(function()
    pcall(destroy, rb)
    sg:SetCore("ResetButtonCallback", true)
    if destroyhum then
        if c then c:BreakJoints() end
        return
    end
    if model and hum0 and (hum0.Health > 0) then
        model:BreakJoints()
        hum0.Health = 0
    end
    if antirespawn then
        respawnrequest()
    end
end)
sg:SetCore("ResetButtonCallback", rb)

tdelay(0, function()
    while c do
        if hum0 and hum1 then
            hum1.Jump = hum0.Jump
        end
        wait()
    end
    sg:SetCore("ResetButtonCallback", true)
end)

R15toR6 = R15toR6 and hum1 and (hum1.RigType == Enum.HumanoidRigType.R15)
if R15toR6 then
    local part = gp(c, "HumanoidRootPart", "BasePart") or gp(c, "UpperTorso", "BasePart") or gp(c, "LowerTorso", "BasePart") or gp(c, "Head", "BasePart") or c:FindFirstChildWhichIsA("BasePart")
    if part then
        local cfr = part.CFrame
        local R6parts = { 
            head = {
                Name = "Head",
                Size = v3(2, 1, 1),
                R15 = {
                    Head = 0
                }
            },
            torso = {
                Name = "Torso",
                Size = v3(2, 2, 1),
                R15 = {
                    UpperTorso = 0.2,
                    LowerTorso = -0.8
                }
            },
            root = {
                Name = "HumanoidRootPart",
                Size = v3(2, 2, 1),
                R15 = {
                    HumanoidRootPart = 0
                }
            },
            leftArm = {
                Name = "Left Arm",
                Size = v3(1, 2, 1),
                R15 = {
                    LeftHand = -0.849,
                    LeftLowerArm = -0.174,
                    LeftUpperArm = 0.415
                }
            },
            rightArm = {
                Name = "Right Arm",
                Size = v3(1, 2, 1),
                R15 = {
                    RightHand = -0.849,
                    RightLowerArm = -0.174,
                    RightUpperArm = 0.415
                }
            },
            leftLeg = {
                Name = "Left Leg",
                Size = v3(1, 2, 1),
                R15 = {
                    LeftFoot = -0.85,
                    LeftLowerLeg = -0.29,
                    LeftUpperLeg = 0.49
                }
            },
            rightLeg = {
                Name = "Right Leg",
                Size = v3(1, 2, 1),
                R15 = {
                    RightFoot = -0.85,
                    RightLowerLeg = -0.29,
                    RightUpperLeg = 0.49
                }
            }
        }
        for i, v in pairs(c:GetChildren()) do
            if v:IsA("BasePart") then
                for i1, v1 in pairs(c:GetChildren()) do
                    if v1:IsA("Motor6D") then
                        v1.Part0 = nil
                    end
                end
            end
        end
        part.Archivable = true
        for i, v in pairs(R6parts) do
            local part = part:Clone()
            part:ClearAllChildren()
            part.Name, part.Size, part.CFrame, part.Anchored, part.Transparency, part.CanCollide = v.Name, v.Size, cfr, false, 1, false
            for i1, v1 in pairs(v.R15) do
                local R15part = gp(c, i1, "BasePart")
                local att = gp(R15part, "att1_" .. i1, "Attachment")
                if R15part then
                    local weld = Instance.new("Weld")
                    weld.Part0, weld.Part1, weld.C0, weld.C1, weld.Name = part, R15part, cf(0, v1, 0), cf_0, "Weld_" .. i1
                    weld.Parent = R15part
                    R15part.Massless, R15part.Name = true, "R15_" .. i1
                    R15part.Parent = part
                    if att then
                        att.Position = v3(0, v1, 0)
                        att.Parent = part
                    end
                end
            end
            part.Parent = c
            R6parts[i] = part
        end
        local R6joints = {
            neck = {
                Parent = R6parts.torso,
                Name = "Neck",
                Part0 = R6parts.torso,
                Part1 = R6parts.head,
                C0 = cf(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
                C1 = cf(0, -0.5, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
            },
            rootJoint = {
                Parent = R6parts.root,
                Name = "RootJoint" ,
                Part0 = R6parts.root,
                Part1 = R6parts.torso,
                C0 = cf(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
                C1 = cf(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
            },
            rightShoulder = {
                Parent = R6parts.torso,
                Name = "Right Shoulder",
                Part0 = R6parts.torso,
                Part1 = R6parts.rightArm,
                C0 = cf(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
                C1 = cf(-0.5, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0)
            },
            leftShoulder = {
                Parent = R6parts.torso,
                Name = "Left Shoulder",
                Part0 = R6parts.torso,
                Part1 = R6parts.leftArm,
                C0 = cf(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
                C1 = cf(0.5, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
            },
            rightHip = {
                Parent = R6parts.torso,
                Name = "Right Hip",
                Part0 = R6parts.torso,
                Part1 = R6parts.rightLeg,
                C0 = cf(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
                C1 = cf(0.5, 1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0)
            },
            leftHip = {
                Parent = R6parts.torso,
                Name = "Left Hip" ,
                Part0 = R6parts.torso,
                Part1 = R6parts.leftLeg,
                C0 = cf(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
                C1 = cf(-0.5, 1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
            }
        }
        for i, v in pairs(R6joints) do
            local joint = Instance.new("Motor6D")
            for prop, val in pairs(v) do
                joint[prop] = val
            end
            R6joints[i] = joint
        end
        if hum1 then
            hum1.RigType, hum1.HipHeight = Enum.HumanoidRigType.R6, 0
        end
    end
end

local torso1 = torso
torso = gp(c, "Torso", "BasePart") or ((not R15toR6) and gp(c, torso.Name, "BasePart"))
if (typeof(hedafterneck) == "Instance") and head and torso and torso1 then
    local conNeck, conTorso, conTorso1 = nil, nil, nil
    local aligns = {}
    local function enableAligns()
        conNeck:Disconnect()
        conTorso:Disconnect()
        conTorso1:Disconnect()
        for i, v in pairs(aligns) do
            v.Enabled = true
        end
    end
    conNeck = hedafterneck.Changed:Connect(function(prop)
        if table.find({"Part0", "Part1", "Parent"}, prop) then
            enableAligns()
        end
    end)
    conTorso = torso:GetPropertyChangedSignal("Parent"):Connect(enableAligns)
    conTorso1 = torso1:GetPropertyChangedSignal("Parent"):Connect(enableAligns)
    for i, v in pairs(head:GetDescendants()) do
        if v:IsA("AlignPosition") or v:IsA("AlignOrientation") then
            i = tostring(i)
            aligns[i] = v
            v:GetPropertyChangedSignal("Parent"):Connect(function()
                aligns[i] = nil
            end)
            v.Enabled = false
        end
    end
end

local flingpart0 = gp(model, flingpart, "BasePart") or gp(gp(model, flingpart, "Accessory"), "Handle", "BasePart")
local flingpart1 = gp(c, flingpart, "BasePart") or gp(gp(c, flingpart, "Accessory"), "Handle", "BasePart")

local fling = function() end
if flingpart0 and flingpart1 then
    flingpart0:GetPropertyChangedSignal("Parent"):Connect(function()
        if not (flingpart0 and flingpart0.Parent) then
            flingpart0 = nil
            fling = function() end
        end
    end)
    flingpart0.Archivable = true
    flingpart1:GetPropertyChangedSignal("Parent"):Connect(function()
        if not (flingpart1 and flingpart1.Parent) then
            flingpart1 = nil
            fling = function() end
        end
    end)
    local att0 = gp(flingpart0, "att0_" .. flingpart0.Name, "Attachment")
    local att1 = gp(flingpart1, "att1_" .. flingpart1.Name, "Attachment")
    if att0 and att1 then
        att0:GetPropertyChangedSignal("Parent"):Connect(function()
            if not (att0 and att0.Parent) then
                att0 = nil
                fling = function() end
            end
        end)
        att1:GetPropertyChangedSignal("Parent"):Connect(function()
            if not (att1 and att1.Parent) then
                att1 = nil
                fling = function() end
            end
        end)
        local lastfling = nil
        local mouse = lp:GetMouse()
        fling = function(target, duration, rotVelocity)
            if typeof(target) == "Instance" then
                if target:IsA("BasePart") then
                    target = target.Position
                elseif target:IsA("Model") then
                    target = gp(target, "HumanoidRootPart", "BasePart") or gp(target, "Torso", "BasePart") or gp(target, "UpperTorso", "BasePart") or target:FindFirstChildWhichIsA("BasePart")
                    if target then
                        target = target.Position
                    else
                        return
                    end
                elseif target:IsA("Humanoid") then
                    target = target.Parent
                    if not (target and target:IsA("Model")) then
                        return
                    end
                    target = gp(target, "HumanoidRootPart", "BasePart") or gp(target, "Torso", "BasePart") or gp(target, "UpperTorso", "BasePart") or target:FindFirstChildWhichIsA("BasePart")
                    if target then
                        target = target.Position
                    else
                        return
                    end
                else
                    return
                end
            elseif typeof(target) == "CFrame" then
                target = target.Position
            elseif typeof(target) ~= "Vector3" then
                target = mouse.Hit
                if target then
                    target = target.Position
                else
                    return
                end
            end
            if target.Y < ws.FallenPartsDestroyHeight + 5 then
                target = v3(target.X, ws.FallenPartsDestroyHeight + 5, target.Z)
            end
            lastfling = target
            if type(duration) ~= "number" then
                duration = tonumber(duration) or 0.2
            end
            if typeof(rotVelocity) ~= "Vector3" then
                rotVelocity = v3(30000, 30000, 30000)
            end
            if not (target and flingpart0 and flingpart1 and att0 and att1) then
                return
            end
            flingpart0.Archivable = true
            local flingpart = flingpart0:Clone()
            flingpart.Transparency = 1
            flingpart.CanCollide = false
            flingpart.Name = "flingpart_" .. flingpart0.Name
            flingpart.Anchored = true
            flingpart.Velocity = v3_0
            flingpart.RotVelocity = v3_0
            flingpart.Position = target
            flingpart:GetPropertyChangedSignal("Parent"):Connect(function()
                if not (flingpart and flingpart.Parent) then
                    flingpart = nil
                end
            end)
            flingpart.Parent = flingpart1
            if flingpart0.Transparency > 0.5 then
                flingpart0.Transparency = 0.5
            end
            att1.Parent = flingpart
            local con = nil
            local rotchg = v3(0, rotVelocity.Unit.Y * -1000, 0)
            con = heartbeat:Connect(function(delta)
                if target and (lastfling == target) and flingpart and flingpart0 and flingpart1 and att0 and att1 then
                    flingpart.Orientation += rotchg * delta
                    flingpart0.RotVelocity = rotVelocity
                else
                    con:Disconnect()
                end
            end)
            if alignmode ~= 4 then
                local con = nil
                con = renderstepped:Connect(function()
                    if flingpart0 and target then
                        flingpart0.RotVelocity = v3_0
                    else
                        con:Disconnect()
                    end
                end)
            end
            twait(duration)
            if lastfling ~= target then
                if flingpart then
                    if att1 and (att1.Parent == flingpart) then
                        att1.Parent = flingpart1
                    end
                    pcall(destroy, flingpart)
                end
                return
            end
            target = nil
            if not (flingpart and flingpart0 and flingpart1 and att0 and att1) then
                return
            end
            flingpart0.RotVelocity = v3_0
            att1.Parent = flingpart1
            pcall(destroy, flingpart)
        end
    end
end


--if not game:IsLoaded() then game.Loaded:Wait() end

local gun = Instance.new("MeshPart",script)
local limb = Instance.new("MeshPart",script)
local t = Instance.new("MeshPart",script)
local h = Instance.new("Part",script)
local alive = true

gun.Anchored = true
limb.Anchored = true
t.Anchored = true
h.Anchored = true

--gun.MeshId = "rbxassetid://430075625"
--limb.MeshId = "rbxasset://fonts/rightarm.mesh"
--t.MeshId = "rbxasset://fonts/torso.mesh"
--the parts became too big so these wont be shown, but u can try to fix it if u want to

gun.Size = Vector3.new(0.271, 1.53, 7.186)
limb.Size = Vector3.new(1,2,1)
t.Size = Vector3.new(2,2,1)
h.Size = Vector3.new(2,1,1)

h.TopSurface = Enum.SurfaceType.Smooth
h.BottomSurface = Enum.SurfaceType.Smooth

gun.Material = Enum.Material.Neon
limb.Material = Enum.Material.SmoothPlastic
t.Material = Enum.Material.SmoothPlastic
h.Material = Enum.Material.Plastic

gun.Name = "gun"
limb.Name = "limb"
t.Name = "t"
h.Name = "h"

gun.Transparency = 1
limb.Transparency = 1
t.Transparency = 1
h.Transparency = 1


repeat
	wait()
until game:GetService("Players").LocalPlayer.Character

if not game:GetService("RunService"):IsStudio() then
	sethiddenproperty(game:GetService("Players").LocalPlayer,"MaximumSimulationRadius",math.huge)
	sethiddenproperty(game:GetService("Players").LocalPlayer,"SimulationRadius",1.0000000331814e+32)
	for i,v in next, game:GetService("Players").LocalPlayer.Character:GetDescendants() do
		if v:IsA("BasePart") then
			game:GetService("RunService").Heartbeat:connect(function()
				v.Velocity = Vector3.new(0.05,0,0)
				wait(0.5)
			end)
		end
	end
	workspace.FallenPartsDestroyHeight = -math.huge
end
wait(1)
game:GetService("StarterGui"):SetCore("SendNotification", { 
	Title = "Cvrt by BaconHacker";
	Text = "Sub Im Patrick today [Patrick Teams]";
	Icon = "rbxthumb://type=Asset&id=11774242795&w=150&h=150"})
Duration = 16;
game:GetService("Players").LocalPlayer.Character.Archivable = true
local lplrChar = game:GetService("Players").LocalPlayer.Character


local Gun = lplrChar:WaitForChild(Yourgun).Handle
local _chr = game.Players.LocalPlayer.Character

local head,lea,ria,lel,ril,tors = _chr.Head,_chr['Left Arm'],_chr['Right Arm'],_chr['Left Leg'],_chr['Right Leg'], _chr.Torso


Gun:FindFirstChildOfClass("Weld"):Destroy()

function fixPos(part,fixPos,ori,offsetx,offsety,offsetz,oriy,name,oriz)
	if oriz == nil then oriz = 0 end
	if offsetz == nil then offsetz = 0 end
	if oriy == nil then oriy = 0 end
	local ao = Instance.new("AlignOrientation",part)
	local ap = Instance.new("AlignPosition",part)
	local at0 = Instance.new("Attachment",part)
	local at1 = Instance.new("Attachment")
	at1.Name = name
	at1.Parent = fixPos
	ao.RigidityEnabled = false
	ap.RigidityEnabled = false
	ao.MaxTorque = 1000000000
	ao.Responsiveness = 200
	ap.MaxForce = 1000000000
	ap.Responsiveness = 200

	ao.Attachment0 = at0
	ao.Attachment1 = at1
	ap.Attachment0 = at0
	ap.Attachment1 = at1

	at1.Position = Vector3.new(offsetx,offsety,offsetz)
	at1.Orientation = Vector3.new(ori,oriy,oriz)

	part.CanCollide = false
end

for i,v in pairs(lplrChar:GetDescendants()) do
	if v:IsA("Motor6D") and v.Name ~= "Neck" and v.Name ~= "RootJoint" and v.Name ~= "Root Hip" then
		v:Destroy()
	end
end


local function NoclipLoop()
	for _, v in pairs(lplrChar:GetDescendants()) do
		if v:IsA("BasePart") then
			v.CanCollide = false
		end
	end
end

game:GetService("RunService").Stepped:Connect(function()
	NoclipLoop()
	game:GetService("Players").LocalPlayer:GetMouse().TargetFilter = lplrChar
end)



















script.Name = game:GetService("Players").LocalPlayer.UserId
local sound
local char = Instance.new("Folder",workspace)
char.Name = "CharFolder"
if not game:IsLoaded() then game.Loaded:Wait() end
local plrs,workspace,run,pps,ts,uis,debris,rf = game:GetService("Players"),game:GetService("Workspace"),game:GetService("RunService"),game:GetService("MarketplaceService"),game:GetService("TweenService"),game:GetService("UserInputService"),game:GetService("Debris"),game:GetService("ReplicatedFirst")
local cn,euler,rad,v3,c3,sin,cos,clamp = CFrame.new,CFrame.fromEulerAnglesYXZ,math.rad,Vector3.new,Color3.fromRGB,math.sin,math.cos,math.clamp
local random = math.random
local S = 1
function cn2(x,y,z)
	return cn(x*S,y*S,z*S)
end
local userid,localplayer,plr = tonumber(script.Name),plrs.LocalPlayer,nil
script.Parent = rf
for i, v in pairs(plrs:GetPlayers()) do
	if v.UserId == userid then
		plr = v
		break
	end
end
local mouse,cam = localplayer:GetMouse(),workspace.CurrentCamera
local funcs = {}
funcs.__index = funcs
function randomstring()
	local e = {}
	for i = 1,random(5,50) do
		table.insert(e,#e+1,string.char(random(10,100)))
	end
	return table.concat(e)
end
function tween(instance,properties,duration,easingdirection,easingstyle)
	spawn(function()
		if easingstyle == nil then easingstyle = Enum.EasingStyle.Quad end
		ts:Create(instance,TweenInfo.new(duration,easingstyle,easingdirection),properties):Play()
	end)
end
function change(instance, properties)
	for i, v in pairs(properties) do
		instance[i] = v
	end
end
function create(class,properties)
	local instance = Instance.new(class)
	--instance.Name = randomstring()
	change(instance,properties)
	return instance
end
local h,t,r,la,ra,ll,rl,face,campart,gun
local hc0,lac0,rac0,llc0,rlc0,sine,animspeed,attack,falling,partexclusion,flying,raycastparams,keys,moving,poscframe,ypos,transparent = cn2(0,1.5,0),cn2(-1.5,0,0),cn2(1.5,0,0),cn2(-0.5,-2,0),cn2(0.5,-2,0),0,1/4,false,false,{},false,RaycastParams.new(),{w=false,a=false,s=false,d=false},false,cn(),50,false
local hoffset,toffset,laoffset,raoffset,lloffset,rloffset,gunoffset = hc0,cn(),lac0,rac0,llc0,rlc0,cn2(-0.365001678,-2.11000013,-0.125)*euler(rad(90),rad(180),0)
raycastparams.FilterType,raycastparams.IgnoreWater = Enum.RaycastFilterType.Blacklist,true
local rotationvalue = Instance.new("CFrameValue",script)
rotationvalue.Name = randomstring()
function fix(instance,parent)
	if instance == parent then
		return true
	else
		local kek = pcall(function()
			instance.Parent--[[,instance.Name]] = parent--[[,randomstring()]]
		end)
		if instance.Parent ~= parent then
			return false
		else
			return kek
		end
	end
end
function checkpart(part,size,collisionfidelity,color,material,transparency,cancollide,localtransparency)
	return (not part or not fix(part,char) or part.Parent ~= char or part.Material ~= material or (not transparent and part.Transparency ~= transparency) or (transparent and part.Transparency ~= 1) or not part.Anchored)
end
function gettransparency(transparency)
	if transparent then
		return 1
	else
		return transparency
	end
end
local backups = {}
backups.__index = backups
for i, v in pairs(script:GetChildren()) do
	if v:IsA("BasePart") then
		backups[v.Name] = v:Clone()
	end
end
run:BindToRenderStep("MaintainParts",777777,function()
	if not rotationvalue or not fix(rotationvalue,script) or rotationvalue.Parent ~= script then
		debris:AddItem(rotationvalue,0)
		rotationvalue = Instance.new("CFrameValue",script)
		rotationvalue.Name = randomstring()
	end
end)

campart = backups.t:Clone()
campart.Transparency = 1
campart.Color = c3(0,0,0)
campart.CanCollide = false
campart.Size = v3(1,1,1)*S
campart.Parent = char
campart.Name = "campart"
campart.Archivable = false
table.insert(partexclusion,campart)

r = backups.t:Clone()
r.Transparency = gettransparency(1)
r.Size = v3(2,2,1)*S
r.Name = "rootPart"
r.Parent = char
r.Archivable = false
r.CFrame = poscframe
table.insert(partexclusion,r)

h = backups.h:Clone()
h.Transparency = gettransparency(1)
h.Size = v3(2,1,1)*S
h.Name = "Head"
h.Parent = char
h.Archivable = false
table.insert(partexclusion,h)

t = backups.t:Clone()
t.Transparency = gettransparency(1)
t.Size = v3(2,2,1)*S
t.Name = "Torso"
t.Parent = char
t.Archivable = false
table.insert(partexclusion,t)

la = backups.limb:Clone()
la.Transparency = gettransparency(1)
la.Size = v3(1,2,1)*S
la.Name = "Left Arm"
la.Parent = char
la.Archivable = false
table.insert(partexclusion,la)

ra = backups.limb:Clone()
ra.Transparency = gettransparency(1)
ra.Size = v3(1,2,1)*S
ra.Name = "Right Arm"
ra.Parent = char
ra.Archivable = false
table.insert(partexclusion,ra)

ll = backups.limb:Clone()
ll.Transparency = gettransparency(1)
ll.Size = v3(1,2,1)*S
ll.Name = "Left Leg"
ll.Parent = char
ll.Archivable = false
table.insert(partexclusion,ll)

rl = backups.limb:Clone()
rl.Transparency = gettransparency(1)
rl.Size = v3(1,2,1)*S
rl.Name = "Right Leg"
rl.Parent = char
rl.Archivable = false
table.insert(partexclusion,rl)

gun = backups.gun:Clone()
gun.Transparency = gettransparency(1)
gun.Size = v3(0.271,1.53,7.186)*S
gun.Name = "Gun"
gun.Parent = char
gun.Archivable = false
table.insert(partexclusion,gun)

local ws = 0.5
local attacks = {}
attacks.__index = attacks
local chamberedbullets = 8
function attacks:part(v,supresssound)
	if not table.find(partexclusion,v) then
		if (v.Size.X < 50 and v.Size.Y < 50 and v.Size.Z < 50) or not v.Anchored then
			table.insert(partexclusion,v)
			v:BreakJoints()
			v.Anchored,v.CanCollide,v.Material = true,false,Enum.Material.Neon
			if not supresssound then
				debris:AddItem(create("Sound",{
					Parent = v,
					SoundId = "rbxassetid://4458055429",
					Volume = 3,
					Playing = true,
					PlayOnRemove = true
				}),0)
			end
			local dur = random(75,100)/100
			tween(v,{CFrame=v.CFrame*cn(random(-7,7),random(-7,7),random(-7,7))*euler(rad(random(0,360)),rad(random(0,360)),rad(random(0,360))),LocalTransparencyModifier=1,Size=v3()},dur,Enum.EasingDirection.Out)
			debris:AddItem(v,.5)
			for i, v in pairs(v:GetChildren()) do
				if v:IsA("Decal") or v:IsA("Texture") then
					tween(v,{Transparency=1},dur,Enum.EasingDirection.Out)
				elseif v:IsA("Fire") or v:IsA("Smoke") or v:IsA("Sparkles") or v:IsA("ParticleEmitter") then
					v.Enabled = false
				elseif v:IsA("Light") then
					tween(v,{Brightness=1},dur,Enum.EasingDirection.Out)
				end
			end
			local flicker = run.RenderStepped:Connect(function()
				v.BrickColor = BrickColor.Random()
			end)
			delay(dur,function()
				flicker:Disconnect()
			end)
		end
	end
end
function attacks:hitbox(pos,range)
	--event:FireServer("hitbox",{pos,range})
	
	local hitbox = create("Part",{
		Parent = workspace,
		Anchored = true,
		CanCollide = false,
		CanQuery = false,
		Material = Enum.Material.ForceField,
		BrickColor = BrickColor.Random(),
		Shape = Enum.PartType.Ball,
		Size = v3(range*2,range*2,range*2),
		Position = pos
	})
	table.insert(partexclusion,hitbox)
	local flicker1 = run.RenderStepped:Connect(function()
		hitbox.BrickColor = BrickColor.Random()
	end)
	tween(hitbox,{Transparency=1},1,Enum.EasingDirection.In)
	debris:AddItem(hitbox,1)

	delay(1,function()
		flicker1:Disconnect()
	end)
	delay(1,function()
		if not attack then
			--bodyPos.Position = Vector3.new(0,1000,0)
		end
	end)

	for i = 1, random(8,12) do
		local yes = create("Part",{
			Parent = workspace,
			Anchored = true,
			CanCollide = false,
			Size = v3(random(2,6),random(10,15)/10,random(1,3))/4 * range * 3,
			CFrame = cn(pos) * euler(rad(random(0,360)),rad(random(0,360)),rad(random(0,360)))
		})
		attacks:part(yes,true)
		debris:AddItem(yes,1)
	end
end
function createlightningbolt(startpos,endpos,width)
	local _start,length = startpos,(startpos-endpos).Magnitude
	local segments = clamp(math.floor(length/5),0,50)
	local function dothethe(s,p,d,l)
		local b = create("Part",{
			Parent = workspace,
			Anchored = true,
			CanCollide = false,
			CanQuery = false,
			Material = Enum.Material.Neon,
			Size = v3(width,width,l),
			Position = s,
			CFrame = cn(s,p) * euler(rad(random(-d,d)),rad(random(-d,d)),rad(random(-d,d)))
		})
		table.insert(partexclusion,b)
		b.CFrame = b.CFrame * cn(0,0,-l/2)
		tween(b,{Size=v3(0,0,l),Transparency=1},0.2,Enum.EasingDirection.In,Enum.EasingStyle.Back)
		local flicker = run.RenderStepped:Connect(function()
			b.Color = gun.Color
		end)
		delay(0.2,function()
			flicker:Disconnect()
		end)
		debris:AddItem(b,.2)
		return (b.CFrame * cn(0,0,-l/2)).p
	end
	for i = 1, segments do
		_start = dothethe(_start,endpos,20,5)
	end
	dothethe(_start,endpos,0,(_start-endpos).Magnitude)
end
function attacks:pew(pos)
	attack = true
	for i = 1, 3, 0.1 do
		run.RenderStepped:Wait()
		laoffset = laoffset:Lerp(lac0*cn2(1.5870018,0.5,-1.52200317)*euler(rad(15),rad(52.5),rad(90)),animspeed)
		raoffset = raoffset:Lerp(rac0*cn2(-0.129001617,0.48300004,-0.625)*euler(rad(75),rad(90),rad(90)),animspeed)
		lloffset = lloffset:Lerp(llc0*cn2(-0.0159988403+cos(sine/20)/20,0.0160000324,-0.173001099-cos(sine/20)/10)*euler(rad(7.5+cos(sine/20)*10),rad(7.5),rad(-5+cos(sine/20)*3.5)),animspeed)
		rloffset = rloffset:Lerp(rlc0*cn2(0.124000549-cos(sine/20)/20,0.559999943,-0.286003113-cos(sine/20)/10)*euler(rad(-37.12+cos(sine/20)*10),rad(-9.42),rad(5.72-cos(sine/20)*3.5)),animspeed)
		toffset = toffset:Lerp(cn2(0,sin(sine/20)/2.5,0)*euler(rad(-cos(sine/20)*10),0,0),animspeed)
		hoffset = hoffset:Lerp(hc0*cn2(0.0970001221,-0.138000011,0)*euler(0,0,rad(-15)),animspeed)
		gunoffset = gunoffset:Lerp(cn2(-0.365001678,-2.11000013,-0.125)*euler(rad(90),rad(180),0),animspeed)
	end
	debris:AddItem(create("Sound",{
		Parent = gun,
		SoundId = "rbxassetid://834546352",
		Volume = 4,
		Playing = true,
		PlayOnRemove = true
	}),0)
	local start = (gun.CFrame * cn2(0,0.672999978,3.56199646)).p
	local dist = clamp((start-pos).Magnitude,0,2048)
	for i = 1, 2 do
		createlightningbolt(start,pos,0.5)
	end
	local battery = create("Part",{
		Parent = workspace,
		CanCollide = false,
		Material = Enum.Material.Neon,
		CFrame = gun.CFrame * cn2(-0.0149993896,0.664999962,-0.507003784) * euler(0,rad(90),0),
		Size = v3(0.15,0.1,0.1)*S,
		RotVelocity = v3(random(-30,30),random(-30,30),random(-30,30))
	})
	debris:AddItem(battery,1)
	table.insert(partexclusion,battery)
	battery.Velocity = v3(0,random(30,50),0) + battery.CFrame.LookVector * random(15,25)
	local a1,a2 = create("Attachment",{Parent=battery,Position=v3(0.075,0,0)}),create("Attachment",{Parent=battery,Position=v3(-0.075,0,0)})
	local trail = create("Trail",{
		Parent = battery,
		Attachment0 = a1,
		Attachment1 = a2,
		FaceCamera = true,
		LightEmission = 1,
		Lifetime = 0.25,
		Transparency = NumberSequence.new{NumberSequenceKeypoint.new(0,0),NumberSequenceKeypoint.new(1,1)}
	})
	local flicker = run.RenderStepped:Connect(function()
		battery.Color,trail.Color = gun.Color,ColorSequence.new{ColorSequenceKeypoint.new(0,gun.Color),ColorSequenceKeypoint.new(1,gun.Color)}
	end)
	debris:AddItem(battery,2)
	delay(2,function()
		flicker:Disconnect()
	end)
	attacks:hitbox(pos,1.5)
	chamberedbullets = chamberedbullets - 1
	for i = 1, random(8,12) do
		local yes = create("Part",{
			Parent = workspace,
			Anchored = true,
			CanCollide = false,
			Size = v3(4,1,2),
			CFrame = cn(start) * euler(rad(random(0,360)),rad(random(0,360)),rad(random(0,360)))
		})
		attacks:part(yes,true)
	end
	for i = 1, 2, 0.1 do
		run.RenderStepped:Wait()
		laoffset = laoffset:Lerp(lac0*cn2(1.5870018,0.5,-1.52200317)*euler(rad(15),rad(52.5),rad(90)),animspeed)
		raoffset = raoffset:Lerp(rac0*cn2(0.10100174,0.10800004,-0.959999084)*euler(rad(56.77),rad(24.15),rad(28.19)),animspeed)
		lloffset = lloffset:Lerp(llc0*cn2(-0.0159988403+cos(sine/20)/20,0.0160000324,-0.173001099-cos(sine/20)/10)*euler(rad(7.5+cos(sine/20)*10),rad(7.5),rad(-5+cos(sine/20)*3.5)),animspeed)
		rloffset = rloffset:Lerp(rlc0*cn2(0.124000549-cos(sine/20)/20,0.559999943,-0.286003113-cos(sine/20)/10)*euler(rad(-37.12+cos(sine/20)*10),rad(-9.42),rad(5.72-cos(sine/20)*3.5)),animspeed)
		toffset = toffset:Lerp(cn2(0,sin(sine/20)/2.5,0)*euler(rad(-cos(sine/20)*10),0,0),animspeed)
		hoffset = hoffset:Lerp(hc0*cn2(-0.0110015869,-0.000999927521,-0.0790023804)*euler(rad(-7.44),rad(-22.56),rad(1)),animspeed)
		gunoffset = gunoffset:Lerp(cn2(-0.365001678,-1.11100006,-1.4980011)*euler(rad(37.5),rad(-180),0),animspeed)
	end
	attack = false
	for i = 1, 2, 0.1 do
		run.RenderStepped:Wait()
		laoffset = laoffset:Lerp(lac0*cn2(1.5870018,0.5,-1.52200317)*euler(rad(15),rad(52.5),rad(90)),animspeed)
		raoffset = raoffset:Lerp(rac0*cn2(0.0730018616,0.211999893,-0.523002625)*euler(rad(63.18),rad(32),rad(35)),animspeed)
		lloffset = lloffset:Lerp(llc0*cn2(-0.0159988403+cos(sine/20)/20,0.0160000324,-0.173001099-cos(sine/20)/10)*euler(rad(7.5+cos(sine/20)*10),rad(7.5),rad(-5+cos(sine/20)*3.5)),animspeed)
		rloffset = rloffset:Lerp(rlc0*cn2(0.124000549-cos(sine/20)/20,0.559999943,-0.286003113-cos(sine/20)/10)*euler(rad(-37.12+cos(sine/20)*10),rad(-9.42),rad(5.72-cos(sine/20)*3.5)),animspeed)
		toffset = toffset:Lerp(cn2(0,sin(sine/20)/2.5,0)*euler(rad(-cos(sine/20)*10),0,0),animspeed)
		hoffset = hoffset:Lerp(hc0*cn2(-0.0110015869,-0.000999927521,-0.0790023804)*euler(rad(-7.44),rad(-22.56),rad(1)),animspeed)
		gunoffset = gunoffset:Lerp(cn2(-0.365001678,-1.74199986,-1.40799713)*euler(rad(45),rad(-180),0),animspeed)
	end
end
function attacks:reload()
	attack = true
	--bodyPos.Position = Vector3.new(0,1000,0)
	for i = 1, 8 do
		for v = 1, 2, 0.1 do
			run.RenderStepped:Wait()
			laoffset = laoffset:Lerp(lac0*cn2(0.374000549,-0.135999918,0.327003479)*euler(rad(-22.5),0,rad(30)),animspeed)
			raoffset = raoffset:Lerp(rac0*cn2(-0.0320014954,0.134000063,-0.48400116)*euler(rad(68.91),rad(-45.99),rad(-44.01)),animspeed)
			lloffset = lloffset:Lerp(llc0*cn2(-0.0159988403+cos(sine/20)/20,0.0160000324,-0.173001099-cos(sine/20)/10)*euler(rad(7.5+cos(sine/20)*10),rad(7.5),rad(-5+cos(sine/20)*3.5)),animspeed)
			rloffset = rloffset:Lerp(rlc0*cn2(0.124000549-cos(sine/20)/20,0.559999943,-0.286003113-cos(sine/20)/10)*euler(rad(-37.12+cos(sine/20)*10),rad(-9.42),rad(5.72-cos(sine/20)*3.5)),animspeed)
			toffset = toffset:Lerp(cn2(0,sin(sine/20)/2.5,0)*euler(rad(-cos(sine/20)*10),0,0),animspeed)
			hoffset = hoffset:Lerp(hc0*cn2(-0.0499992371,-0.0170001984,-0.120002747)*euler(rad(-15),rad(22.56),0),animspeed)
			gunoffset = gunoffset:Lerp(cn2(-0.364997864,-1.82200003,-0.36700058)*euler(rad(30),rad(180),0),animspeed)
		end
		for v = 1, 2, 0.1 do
			run.RenderStepped:Wait()
			laoffset = laoffset:Lerp(lac0*cn2(1.57699966,0.00699996948,-1.35600281)*euler(rad(58.41),rad(-85.81),rad(-34.87)),animspeed)
			raoffset = raoffset:Lerp(rac0*cn2(-0.0320014954,0.134000063,-0.48400116)*euler(rad(68.91),rad(-45.99),rad(-44.01)),animspeed)
			lloffset = lloffset:Lerp(llc0*cn2(-0.0159988403+cos(sine/20)/20,0.0160000324,-0.173001099-cos(sine/20)/10)*euler(rad(7.5+cos(sine/20)*10),rad(7.5),rad(-5+cos(sine/20)*3.5)),animspeed)
			rloffset = rloffset:Lerp(rlc0*cn2(0.124000549-cos(sine/20)/20,0.559999943,-0.286003113-cos(sine/20)/10)*euler(rad(-37.12+cos(sine/20)*10),rad(-9.42),rad(5.72-cos(sine/20)*3.5)),animspeed)
			toffset = toffset:Lerp(cn2(0,sin(sine/20)/2.5,0)*euler(rad(-cos(sine/20)*10),0,0),animspeed)
			hoffset = hoffset:Lerp(hc0*cn2(-0.0499992371,-0.0170001984,-0.120002747)*euler(rad(-15),rad(-22.56),0),animspeed)
			gunoffset = gunoffset:Lerp(cn2(-0.364997864,-1.82200003,-0.36700058)*euler(rad(30),rad(180),0),animspeed)
		end
		debris:AddItem(create("Sound",{
			Parent = gun,
			SoundId = "rbxassetid://293574839",
			Volume = 0.4,
			Playing = true,
			PlayOnRemove = true
		}),0)
	end
	for i = 1, 2, 0.1 do
		run.RenderStepped:Wait()
		laoffset = laoffset:Lerp(lac0*cn2(1.5870018,0.5,-1.52200317)*euler(rad(15),rad(52.5),rad(90)),animspeed)
		raoffset = raoffset:Lerp(rac0*cn2(0.10100174,0.10800004,-0.959999084)*euler(rad(56.77),rad(24.15),rad(28.19)),animspeed)
		lloffset = lloffset:Lerp(llc0*cn2(-0.0159988403+cos(sine/20)/20,0.0160000324,-0.173001099-cos(sine/20)/10)*euler(rad(7.5+cos(sine/20)*10),rad(7.5),rad(-5+cos(sine/20)*3.5)),animspeed)
		rloffset = rloffset:Lerp(rlc0*cn2(0.124000549-cos(sine/20)/20,0.559999943,-0.286003113-cos(sine/20)/10)*euler(rad(-37.12+cos(sine/20)*10),rad(-9.42),rad(5.72-cos(sine/20)*3.5)),animspeed)
		toffset = toffset:Lerp(cn2(0,sin(sine/20)/2.5,0)*euler(rad(-cos(sine/20)*10),0,0),animspeed)
		hoffset = hoffset:Lerp(hc0*cn2(-0.0110015869,-0.000999927521,-0.0790023804)*euler(rad(-7.44),rad(-22.56),rad(1)),animspeed)
		gunoffset = gunoffset:Lerp(cn2(-0.365001678,-1.11100006,-1.4980011)*euler(rad(37.5),rad(-180),0),animspeed)
	end
	for i = 1, 2, 0.1 do
		run.RenderStepped:Wait()
		laoffset = laoffset:Lerp(lac0*cn2(1.5870018,0.5,-1.52200317)*euler(rad(15),rad(52.5),rad(90)),animspeed)
		raoffset = raoffset:Lerp(rac0*cn2(0.0730018616,0.211999893,-0.523002625)*euler(rad(63.18),rad(32),rad(35)),animspeed)
		lloffset = lloffset:Lerp(llc0*cn2(-0.0159988403+cos(sine/20)/20,0.0160000324,-0.173001099-cos(sine/20)/10)*euler(rad(7.5+cos(sine/20)*10),rad(7.5),rad(-5+cos(sine/20)*3.5)),animspeed)
		rloffset = rloffset:Lerp(rlc0*cn2(0.124000549-cos(sine/20)/20,0.559999943,-0.286003113-cos(sine/20)/10)*euler(rad(-37.12+cos(sine/20)*10),rad(-9.42),rad(5.72-cos(sine/20)*3.5)),animspeed)
		toffset = toffset:Lerp(cn2(0,sin(sine/20)/2.5,0)*euler(rad(-cos(sine/20)*10),0,0),animspeed)
		hoffset = hoffset:Lerp(hc0*cn2(-0.0110015869,-0.000999927521,-0.0790023804)*euler(rad(-7.44),rad(-22.56),rad(1)),animspeed)
		gunoffset = gunoffset:Lerp(cn2(-0.365001678,-1.74199986,-1.40799713)*euler(rad(45),rad(-180),0),animspeed)
	end
	chamberedbullets = 25
	attack = false
end
function attacks:teleport(pos)
	local newpos = cn(pos)
	local positions = {poscframe.p,pos,pos}
	poscframe,ypos = cn(positions[2]),positions[2].Y
	for i = 1, 2 do
		local p = create("Part",{
			Parent = workspace,
			Anchored = true,
			CanCollide = false,
			Position = positions[i],
			Size = v3(6,6,6),
			Material = Enum.Material.Neon
		})
		table.insert(partexclusion,p)
		tween(p,{Size=v3(),Transparency=1},0.2,Enum.EasingDirection.In,Enum.EasingStyle.Back)
		local flicker = run.RenderStepped:Connect(function()
			p.Color = gun.Color
		end)
		delay(0.2,function()
			flicker:Disconnect()
		end)
		debris:AddItem(p,0.2)
		for v = 1, random(8,12) do
			local yes = create("Part",{
				Parent = workspace,
				Anchored = true,
				CanCollide = false,
				Size = v3(4,4,4),
				CFrame = cn(positions[i]) * euler(rad(random(0,360)),rad(random(0,360)),rad(random(0,360)))
			})
			attacks:part(yes,true)
			debris:AddItem(yes,1)
		end
	end
	debris:AddItem(create("Sound",{
		Parent = r,
		SoundId = "rbxassetid://5909720414",
		Volume = 3,
		Playing = true,
		PlayOnRemove = true
	}),0)
	createlightningbolt(positions[1],positions[2],1.5)
end
function attacks:reloadcharacter()
	debris:AddItem(h,0) debris:AddItem(campart,0) debris:AddItem(r,0) debris:AddItem(t,0) debris:AddItem(la,0) debris:AddItem(ra,0) debris:AddItem(ll,0) debris:AddItem(rl,0)
end
if localplayer == plr then
	game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage",{Text="Convert by TheBaconHacker and im patrick\nScript made by "..plrs:GetNameFromUserIdAsync(145632006),Color=Color3.fromRGB(0,255,255)})
	run:BindToRenderStep("Movement",777777,function()
		raycastparams.FilterDescendantsInstances = partexclusion
		cam.CameraSubject,cam.CameraType,cam.FieldOfView,localplayer.CameraMaxZoomDistance,localplayer.CameraMinZoomDistance,localplayer.CameraMode,cam.FieldOfViewMode = campart,Enum.CameraType.Custom,70,math.huge,0,Enum.CameraMode.Classic,Enum.FieldOfViewMode.Vertical
		local movedirection,pos,lv = v3(),poscframe.p,cam.CFrame.LookVector
		if keys.w then movedirection = movedirection + v3(0,0,-ws) end
		if keys.a then movedirection = movedirection + v3(-ws,0,0) end
		if keys.s then movedirection = movedirection + v3(0,0,ws) end
		if keys.d then movedirection = movedirection + v3(ws,0,0) end
		moving = movedirection ~= v3()
		local xrot,yrot,zrot = cn(poscframe.p,Vector3.new(poscframe.X+lv.X,poscframe.Y,poscframe.Z+lv.Z)):ToOrientation()
		local raycast = workspace:Raycast(r.Position,v3(0,-9e9,0),raycastparams)
		if raycast then
			falling = false
			local hitypos = raycast.Position.Y
			ypos = cn(0,ypos,0):Lerp(cn(0,hitypos+5,0),0.1).p.Y
		else
			falling = true
			ypos = ypos - 3
		end
		if flying then
			poscframe = cn(poscframe.p,poscframe.p+cam.CFrame.LookVector)
			poscframe = poscframe * cn(movedirection)
			ypos = poscframe.p.Y
		else
			local moveto = (cn(pos.X,ypos,pos.Z) * euler(0,rad(math.deg(yrot)),0) * cn(movedirection)).p
			if uis.MouseBehavior == Enum.MouseBehavior.LockCenter then
				rotationvalue.Value = euler(0,rad(math.deg(yrot)),0)
			else
				if movedirection ~= v3() then
					local z = ts:Create(rotationvalue,TweenInfo.new(0.1,Enum.EasingStyle.Quad,Enum.EasingDirection.Out),{Value=cn(v3(pos.X,ypos,pos.Z),moveto)})
					z:Play()
					delay(1/60,function()
						z:Cancel()
					end)
				end
			end
			local xrot2,yrot2,zrot2 = rotationvalue.Value:ToOrientation()
			poscframe = cn(moveto) * euler(0,rad(math.deg(yrot2)),0)
		end
		r.CFrame,transparent = poscframe,(cam.CFrame.p-campart.Position).Magnitude < 1 and uis.MouseBehavior == Enum.MouseBehavior.LockCenter
		campart.CFrame = r.CFrame * hc0
		--event:FireServer("replicate",{poscframe,moving,flying,falling})
	end)
	mouse.KeyDown:Connect(function(key)
		if not alive then return end
		if key == "w" or key == "a" or key == "s" or key == "d" then
			keys[key] = true
		elseif key == "f" then
			flying = not flying
		elseif key == "q" then
			--event:FireServer("keydown",{"q",})
			--attacks:reloadcharacter()
		elseif key == "z" then
			local pos = mouse.Hit.p + v3(0,5,0)
			--event:FireServer("keydown",{"z",pos})
			attacks:teleport(pos)
		end
	end)
	mouse.KeyUp:Connect(function(key)
		if not alive then return end
		if key == "w" or key == "a" or key == "s" or key == "d" then
			keys[key] = false
		end
	end)
	mouse.Button1Down:Connect(function()
		if attack or not alive then return end
		if chamberedbullets > 0 then
			local hitpos = mouse.Hit.p
			--event:FireServer("keydown",{"mouse1",hitpos})
			attacks:pew(hitpos)
			fling(hitpos, 0.1)
		else
			--event:FireServer("keydown",{"reload"})
			attacks:reload()
			fling(game:GetService("Players").LocalPlayer.Character["Model"].HumanoidRootPart.Position, 0.1)
		end
	end)
end
local bgm,bgmstarttime,bgmlength = create("Sound",{Parent=cam}),tick(),86.831
local bgmmaintain = cam.ChildRemoved:Connect(function(instance)
	if instance == bgm then
		bgm = create("Sound",{Parent = cam})
		local changed,fixing = nil,false
		changed = bgm.Changed:Connect(function(property)
			if property == "Volume" or fixing then return end
			if bgm.Parent ~= cam then changed:Disconnect() return end
			fixing = true
			local timediff = tick()-bgmstarttime
			change(bgm,{
				SoundId = "rbxassetid://3979209289", -- old id - 5894963746
				Looped = true,
				Playing = true,
				Pitch = 1,
				Name = randomstring(),
				RollOffMaxDistance = 10000,
				RollOffMinDistance = 10,
				RollOffMode = Enum.RollOffMode.Inverse,
				PlayOnRemove = false,
				TimePosition = clamp(bgm.TimePosition,timediff-0.2,timediff+0.2),
			})
			bgm.SoundGroup = nil
			fixing = false
		end)
		bgm.Name = "hi lol"
		sound = bgm
	end
end)
debris:AddItem(bgm,0)
local rendered,remoteremoved
rendered = run.RenderStepped:Connect(function()
	sine = sine + 1
	if tick()-bgmstarttime > bgmlength then
		bgmstarttime,bgm.Name = tick(),"hi lol"
	end
	if not attack then
		raoffset = raoffset:Lerp(rac0*cn2(-1.00600052,0.665999889-cos(sine/20)/7,0.569000244)*euler(rad(-66.3),rad(141.54),rad(141.54+cos(sine/20)*5)),animspeed)
		gunoffset = gunoffset:Lerp(cn2(-0.365001678,-2.11000013,-0.125)*euler(rad(90),rad(180),0),animspeed)
		if moving then
			laoffset = laoffset:Lerp(lac0*cn2(1.09999847,0.150000095,-0.459999084)*euler(rad(17.67),rad(14.15),rad(69.71)),animspeed)
			lloffset = lloffset:Lerp(llc0*cn2(-0.0159988403+cos(sine/20)/20,0.0160000324,-0.173001099-cos(sine/20)/10)*euler(rad(7.5+cos(sine/20)*10),rad(7.5),rad(-5+cos(sine/20)*3.5)),animspeed)
			rloffset = rloffset:Lerp(rlc0*cn2(0.124000549-cos(sine/20)/20,0.559999943,-0.286003113-cos(sine/20)/10)*euler(rad(-37.12+cos(sine/20)*10),rad(-9.42),rad(5.72-cos(sine/20)*3.5)),animspeed)
			toffset = toffset:Lerp(cn2(0,sin(sine/20)/2.5,0)*euler(rad(-50),0,0),animspeed)
			hoffset = hoffset:Lerp(cn2(0,1,0)*euler(rad(50),0,0)*cn2(0,0.5,0),animspeed)
		else
			laoffset = laoffset:Lerp(lac0*cn2(1.09999847,0.150000095,-0.459999084)*euler(rad(17.67),rad(14.15),rad(69.71)),animspeed)
			lloffset = lloffset:Lerp(llc0*cn2(-0.0159988403-cos(sine/20)/10,0.0160000324,-0.173001099+cos(sine/20)/5)*euler(rad(7.5-cos(sine/20)*20),rad(7.5),rad(-5-cos(sine/20)*7)),animspeed)
			rloffset = rloffset:Lerp(rlc0*cn2(0.124000549+cos(sine/20)/10,0.559999943,-0.286003113+cos(sine/20)/5)*euler(rad(-37.12-cos(sine/20)*20),rad(-9.42),rad(5.72+cos(sine/20)*7)),animspeed)
			toffset = toffset:Lerp(cn2(0,sin(sine/20)/2.5,0)*euler(rad(30-cos(sine/20)*10),0,0),animspeed)
			hoffset = hoffset:Lerp(cn2(0,1,0)*euler(rad(-22.5),0,0)*cn2(0,0.5,0),animspeed)
		end
	end
	t.CFrame = r.CFrame * toffset
	la.CFrame,ra.CFrame,ll.CFrame,rl.CFrame,h.CFrame = t.CFrame*laoffset,t.CFrame*raoffset,t.CFrame*lloffset,t.CFrame*rloffset,t.CFrame*hoffset
	gun.CFrame,gun.BrickColor,bgm.Volume = ra.CFrame * gunoffset,BrickColor.Random(),clamp(10/(cam.CFrame.p-r.Position).Magnitude,0,5)
end)
local eventconnection
fixPos(lel,char["Left Leg"],0,0,0,0,0,"b")
fixPos(ril,char["Right Leg"],0,0,0,0,0,"b")
fixPos(tors,char.Torso,0,0,0,0,0,"b")
fixPos(ria,char["Right Arm"],0,0,0,0,0,"b")
fixPos(lea,char["Left Arm"],0,0,0,0,0,"b")
fixPos(head,char.Head,0,0,0,0,0,"b")
fixPos(Gun,char["Gun"],0,0,.5,-.15,-90,"b",65)

table.insert(partexclusion,lel)
table.insert(partexclusion,ril)
table.insert(partexclusion,tors)
table.insert(partexclusion,ria)
table.insert(partexclusion,lea)
table.insert(partexclusion,head)
table.insert(partexclusion,Gun)

plr.CharacterAdded:Connect(function(c)
	char:Destroy()
	local newCam = Instance.new("Camera",workspace)
	workspace.CurrentCamera = newCam
	newCam.CameraSubject = c:FindFirstChildOfClass("Humanoid")
	alive = false
end)
