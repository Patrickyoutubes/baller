game:GetService("StarterGui"):SetCore("SendNotification", { 
	Title = "wait";
	Text = "";
	Icon = "rbxthumb://type=Asset&id=11774242795&w=150&h=150"})
Duration = 19;
game:GetService("StarterGui"):SetCore("SendNotification", { 
	Title = "";
	Text = "Controls z x c q";
	Icon = "rbxthumb://type=Asset&id=11774242795&w=150&h=150"})
Duration = 21;

game:GetService("StarterGui"):SetCore("SendNotification", { 
	Title = "made by Im Patrick";
	Text = "Sub Im Patrick .Thanks Dark";
	Icon = "rbxthumb://type=Asset&id=11774242795&w=150&h=150"})
Duration = 26;

--reanimate by MyWorld#4430 discord.gg/pYVHtSJmEY
--the code that looks trash and works great
local healthHide = false --moves your head away every 3 seconds so players dont see your health bar (alignmode 4 only)
local reclaim = true --if you lost control over a part this will move your primary part to the part so you get it back (alignmode 4)
local novoid = true --prevents parts from going under workspace.FallenPartsDestroyHeight if you control them (alignmode 4 only)
local physp = nil --PhysicalProperties.new(0.01, 0, 1, 0, 0) --sets .CustomPhysicalProperties to this for each part
local noclipAllParts = true --set it to true if you want noclip
local antiragdoll = true --removes hingeConstraints and ballSocketConstraints from your character
local newanimate = true --disables the animate script and enables after reanimation
local discharscripts = true --disables all localScripts parented to your character before reanimation
local R15toR6 = true --tries to convert your character to r6 if its r15
local hatcollide = false --makes hats cancollide (credit to ShownApe) (works only with reanimate method 0)
local humState16 = true --enables collisions for limbs before the humanoid dies (using hum:ChangeState)
local addtools = false --puts all tools from backpack to character and lets you hold them after reanimation
local hedafterneck = true --disable aligns for head and enable after neck or torso is removed
local simrad = 1000 --simulation radius with sethiddenproperty (nil to disable)
local loadtime = game:GetService("Players").RespawnTime + 0.5 --anti respawn delay
local method = 3 --reanimation method
--methods:
--0 - breakJoints (takes [loadtime] seconds to load)
--1 - limbs
--2 - limbs + anti respawn
--3 - limbs + breakJoints after [loadtime] seconds
--4 - remove humanoid + breakJoints
--5 - remove humanoid + limbs
local alignmode = 4 --AlignPosition mode
--modes:
--1 - AlignPosition rigidity enabled true
--2 - 2 AlignPositions rigidity enabled both true and false
--3 - AlignPosition rigidity enabled false
--4 - no AlignPosition, CFrame only
local flingpart = "HumanoidRootPart" --name of the part or the hat used for flinging
--the fling function
--usage: fling(target, duration, velocity)
--target can be set to: basePart, CFrame, Vector3, character model or humanoid (flings at mouse.Hit if argument not provided)
--duration (fling time in seconds) can be set to a number or a string convertable to a number (0.5s if not provided)
--velocity (fling part rotation velocity) can be set to a vector3 value (Vector3.new(20000, 20000, 20000) if not provided)

local lp = game:GetService("Players").LocalPlayer
local rs, ws, sg = game:GetService("RunService"), game:GetService("Workspace"), game:GetService("StarterGui")
local stepped, heartbeat, renderstepped = rs.Stepped, rs.Heartbeat, rs.RenderStepped
local twait, tdelay, rad, inf, abs, mclamp = task.wait, task.delay, math.rad, math.huge, math.abs, math.clamp
local cf, v3, angles = CFrame.new, Vector3.new, CFrame.Angles
local v3_0, cf_0 = v3(0, 0, 0), cf(0, 0, 0)

local c = lp.Character
if not (c and c.Parent) then
    return
end

c:GetPropertyChangedSignal("Parent"):Connect(function()
    if not (c and c.Parent) then
        c = nil
    end
end)

local destroy = c.Destroy

local function gp(parent, name, className)
    if typeof(parent) == "Instance" then
        for i, v in pairs(parent:GetChildren()) do
            if (v.Name == name) and v:IsA(className) then
                return v
            end
        end
    end
    return nil
end

local v3_xz, v3_net = v3(8, 0, 8), v3(0.1, 25.1, 0.1)
local function getNetlessVelocity(realPartVelocity) --edit this if you have a better netless method
    if realPartVelocity.Magnitude < 0.1 then return v3_net end
    return realPartVelocity * v3_xz + v3_net
end

if type(simrad) == "number" then
    local shp = getfenv().sethiddenproperty
    if shp then
        local con = nil
        con = heartbeat:Connect(function()
            if not c then return con:Disconnect() end
            shp(lp, "SimulationRadius", simrad)
        end)
    end
end

healthHide = healthHide and ((method == 0) or (method == 2) or (method == 3)) and gp(c, "Head", "BasePart")

local reclaim, lostpart = reclaim and c.PrimaryPart, nil

local v3_hide = v3(0, 3000, 0)
local function align(Part0, Part1)
    
    local att0 = Instance.new("Attachment")
    att0.Position, att0.Orientation, att0.Name = v3_0, v3_0, "att0_" .. Part0.Name
    local att1 = Instance.new("Attachment")
    att1.Position, att1.Orientation, att1.Name = v3_0, v3_0, "att1_" .. Part1.Name

    if alignmode == 4 then
    
        local hide = false
        if Part0 == healthHide then
            healthHide = false
            tdelay(0, function()
                while twait(2.9) and Part0 and c do
                    hide = #Part0:GetConnectedParts() == 1
                    twait(0.1)
                    hide = false
                end
            end)
        end
        
        local rot = rad(0.05)
        local con0, con1 = nil, nil
        con0 = stepped:Connect(function()
            if not (Part0 and Part1) then return con0:Disconnect() and con1:Disconnect() end
            Part0.RotVelocity = Part1.RotVelocity
        end)
        local lastpos, vel = Part0.Position, Part0.Velocity
        con1 = heartbeat:Connect(function(delta)
            if not (Part0 and Part1 and att1) then return con0:Disconnect() and con1:Disconnect() end
            if (not Part0.Anchored) and (Part0.ReceiveAge == 0) then
                if lostpart == Part0 then
                    lostpart = nil
                end
                local newcf = Part1.CFrame * att1.CFrame
                local vel = (newcf.Position - lastpos) / delta
                Part0.Velocity = getNetlessVelocity(vel)
                if vel.Magnitude < 1 then
                    rot = -rot
                    newcf *= angles(0, 0, rot)
                end
                lastpos = newcf.Position
                if lostpart and (Part0 == reclaim) then
                    newcf = lostpart.CFrame
                elseif hide then
                    newcf += v3_hide
                end
                if novoid and (newcf.Y < ws.FallenPartsDestroyHeight + 0.1) then
                    newcf += v3(0, ws.FallenPartsDestroyHeight + 0.1 - newcf.Y, 0)
                end
                Part0.CFrame = newcf
            elseif (not Part0.Anchored) and (abs(Part0.Velocity.X) < 45) and (abs(Part0.Velocity.Y) < 25) and (abs(Part0.Velocity.Z) < 45) then
                lostpart = Part0
            end
        end)
    
    else
        
        Part0.CustomPhysicalProperties = physp
        if (alignmode == 1) or (alignmode == 2) then
            local ape = Instance.new("AlignPosition")
            ape.MaxForce, ape.MaxVelocity, ape.Responsiveness = inf, inf, inf
            ape.ReactionForceEnabled, ape.RigidityEnabled, ape.ApplyAtCenterOfMass = false, true, false
            ape.Attachment0, ape.Attachment1, ape.Name = att0, att1, "AlignPositionRtrue"
            ape.Parent = att0
        end
        
        if (alignmode == 2) or (alignmode == 3) then
            local apd = Instance.new("AlignPosition")
            apd.MaxForce, apd.MaxVelocity, apd.Responsiveness = inf, inf, inf
            apd.ReactionForceEnabled, apd.RigidityEnabled, apd.ApplyAtCenterOfMass = false, false, false
            apd.Attachment0, apd.Attachment1, apd.Name = att0, att1, "AlignPositionRfalse"
            apd.Parent = att0
        end
        
        local ao = Instance.new("AlignOrientation")
        ao.MaxAngularVelocity, ao.MaxTorque, ao.Responsiveness = inf, inf, inf
        ao.PrimaryAxisOnly, ao.ReactionTorqueEnabled, ao.RigidityEnabled = false, false, false
        ao.Attachment0, ao.Attachment1 = att0, att1
        ao.Parent = att0
        
        local con0, con1 = nil, nil
        local vel = Part0.Velocity
        con0 = renderstepped:Connect(function()
            if not (Part0 and Part1) then return con0:Disconnect() and con1:Disconnect() end
            Part0.Velocity = framevel
        end)
        local lastpos = Part0.Position
        con1 = heartbeat:Connect(function(delta)
            if not (Part0 and Part1) then return con0:Disconnect() and con1:Disconnect() end
            vel = Part0.Velocity
            Part0.Velocity = getNetlessVelocity((Part1.Position - lastpos) / delta)
            lastpos = Part1.Position
        end)
    
    end

    att0:GetPropertyChangedSignal("Parent"):Connect(function()
        Part0 = att0.Parent
        if not Part0:IsA("BasePart") then
            att0 = nil
            if lostpart == Part0 then
                lostpart = nil
            end
            Part0 = nil
        end
    end)
    att0.Parent = Part0
    
    att1:GetPropertyChangedSignal("Parent"):Connect(function()
        Part1 = att1.Parent
        if not Part1:IsA("BasePart") then
            att1 = nil
            Part1 = nil
        end
    end)
    att1.Parent = Part1
end

local function respawnrequest()
    local ccfr, c = ws.CurrentCamera.CFrame, lp.Character
    lp.Character = nil
    lp.Character = c
    local con = nil
    con = ws.CurrentCamera.Changed:Connect(function(prop)
        if (prop ~= "Parent") and (prop ~= "CFrame") then
            return
        end
        ws.CurrentCamera.CFrame = ccfr
        con:Disconnect()
    end)
end

local destroyhum = (method == 4) or (method == 5)
local breakjoints = (method == 0) or (method == 4)
local antirespawn = (method == 0) or (method == 2) or (method == 3)

hatcollide = hatcollide and (method == 0)

addtools = addtools and lp:FindFirstChildOfClass("Backpack")

if antiragdoll then
    antiragdoll = function(v)
        if v:IsA("HingeConstraint") or v:IsA("BallSocketConstraint") then
            v.Parent = nil
        end
    end
    for i, v in pairs(c:GetDescendants()) do
        antiragdoll(v)
    end
    c.DescendantAdded:Connect(antiragdoll)
end

if antirespawn then
    respawnrequest()
end

if method == 0 then
    twait(loadtime)
    if not c then
        return
    end
end

if discharscripts then
    for i, v in pairs(c:GetDescendants()) do
        if v:IsA("LocalScript") then
            v.Disabled = true
        end
    end
elseif newanimate then
    local animate = gp(c, "Animate", "LocalScript")
    if animate and (not animate.Disabled) then
        animate.Disabled = true
    else
        newanimate = false
    end
end

if addtools then
    for i, v in pairs(addtools:GetChildren()) do
        if v:IsA("Tool") then
            v.Parent = c
        end
    end
end

pcall(function()
    settings().Physics.AllowSleep = false
    settings().Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Disabled
end)

local OLDscripts = {}

for i, v in pairs(c:GetDescendants()) do
    if v.ClassName == "Script" then
        OLDscripts[v.Name] = true
    end
end

local scriptNames = {}

for i, v in pairs(c:GetDescendants()) do
    if v:IsA("BasePart") then
        local newName, exists = tostring(i), true
        while exists do
            exists = OLDscripts[newName]
            if exists then
                newName = newName .. "_"    
            end
        end
        table.insert(scriptNames, newName)
        Instance.new("Script", v).Name = newName
    end
end

local hum = c:FindFirstChildOfClass("Humanoid")
if hum then
    for i, v in pairs(hum:GetPlayingAnimationTracks()) do
        v:Stop()
    end
end
c.Archivable = true
local cl = c:Clone()
if hum and humState16 then
    hum:ChangeState(Enum.HumanoidStateType.Physics)
    if destroyhum then
        twait(1.6)
    end
end
if destroyhum then
    pcall(destroy, hum)
end

if not c then
    return
end

local head, torso, root = gp(c, "Head", "BasePart"), gp(c, "Torso", "BasePart") or gp(c, "UpperTorso", "BasePart"), gp(c, "HumanoidRootPart", "BasePart")
if hatcollide then
    pcall(destroy, torso)
    pcall(destroy, root)
    pcall(destroy, c:FindFirstChildOfClass("BodyColors") or gp(c, "Health", "Script"))
end

local model = Instance.new("Model", c)
model:GetPropertyChangedSignal("Parent"):Connect(function()
    if not (model and model.Parent) then
        model = nil
    end
end)

for i, v in pairs(c:GetChildren()) do
    if v ~= model then
        if addtools and v:IsA("Tool") then
            for i1, v1 in pairs(v:GetDescendants()) do
                if v1 and v1.Parent and v1:IsA("BasePart") then
                    local bv = Instance.new("BodyVelocity")
                    bv.Velocity, bv.MaxForce, bv.P, bv.Name = v3_0, v3(1000, 1000, 1000), 1250, "bv_" .. v.Name
                    bv.Parent = v1
                end
            end
        end
        v.Parent = model
    end
end

if breakjoints then
    model:BreakJoints()
else
    if head and torso then
        for i, v in pairs(model:GetDescendants()) do
            if v:IsA("JointInstance") then
                local save = false
                if (v.Part0 == torso) and (v.Part1 == head) then
                    save = true
                end
                if (v.Part0 == head) and (v.Part1 == torso) then
                    save = true
                end
                if save then
                    if hedafterneck then
                        hedafterneck = v
                    end
                else
                    pcall(destroy, v)
                end
            end
        end
    end
    if method == 3 then
        task.delay(loadtime, pcall, model.BreakJoints, model)
    end
end

cl.Parent = ws
for i, v in pairs(cl:GetChildren()) do
    v.Parent = c
end
pcall(destroy, cl)

local uncollide, noclipcon = nil, nil
if noclipAllParts then
    uncollide = function()
        if c then
            for i, v in pairs(c:GetDescendants()) do
                if v:IsA("BasePart") then
                    v.CanCollide = false
                end
            end
        else
            noclipcon:Disconnect()
        end
    end
else
    uncollide = function()
        if model then
            for i, v in pairs(model:GetDescendants()) do
                if v:IsA("BasePart") then
                    v.CanCollide = false
                end
            end
        else
            noclipcon:Disconnect()
        end
    end
end
noclipcon = stepped:Connect(uncollide)
uncollide()

for i, scr in pairs(model:GetDescendants()) do
    if (scr.ClassName == "Script") and table.find(scriptNames, scr.Name) then
        local Part0 = scr.Parent
        if Part0:IsA("BasePart") then
            for i1, scr1 in pairs(c:GetDescendants()) do
                if (scr1.ClassName == "Script") and (scr1.Name == scr.Name) and (not scr1:IsDescendantOf(model)) then
                    local Part1 = scr1.Parent
                    if (Part1.ClassName == Part0.ClassName) and (Part1.Name == Part0.Name) then
                        align(Part0, Part1)
                        pcall(destroy, scr)
                        pcall(destroy, scr1)
                        break
                    end
                end
            end
        end
    end
end

for i, v in pairs(c:GetDescendants()) do
    if v and v.Parent and (not v:IsDescendantOf(model)) then
        if v:IsA("Decal") then
            v.Transparency = 1
        elseif v:IsA("BasePart") then
            v.Transparency = 1
            v.Anchored = false
        elseif v:IsA("ForceField") then
            v.Visible = false
        elseif v:IsA("Sound") then
            v.Playing = false
        elseif v:IsA("BillboardGui") or v:IsA("SurfaceGui") or v:IsA("ParticleEmitter") or v:IsA("Fire") or v:IsA("Smoke") or v:IsA("Sparkles") then
            v.Enabled = false
        end
    end
end

if newanimate then
    local animate = gp(c, "Animate", "LocalScript")
    if animate then
        animate.Disabled = false
    end
end

if addtools then
    for i, v in pairs(c:GetChildren()) do
        if v:IsA("Tool") then
            v.Parent = addtools
        end
    end
end

local hum0, hum1 = model:FindFirstChildOfClass("Humanoid"), c:FindFirstChildOfClass("Humanoid")
if hum0 then
    hum0:GetPropertyChangedSignal("Parent"):Connect(function()
        if not (hum0 and hum0.Parent) then
            hum0 = nil
        end
    end)
end
if hum1 then
    hum1:GetPropertyChangedSignal("Parent"):Connect(function()
        if not (hum1 and hum1.Parent) then
            hum1 = nil
        end
    end)

    ws.CurrentCamera.CameraSubject = hum1
    local camSubCon = nil
    local function camSubFunc()
        camSubCon:Disconnect()
        if c and hum1 then
            ws.CurrentCamera.CameraSubject = hum1
        end
    end
    camSubCon = renderstepped:Connect(camSubFunc)
    if hum0 then
        hum0:GetPropertyChangedSignal("Jump"):Connect(function()
            if hum1 then
                hum1.Jump = hum0.Jump
            end
        end)
    else
        respawnrequest()
    end
end

local rb = Instance.new("BindableEvent", c)
rb.Event:Connect(function()
    pcall(destroy, rb)
    sg:SetCore("ResetButtonCallback", true)
    if destroyhum then
        if c then c:BreakJoints() end
        return
    end
    if model and hum0 and (hum0.Health > 0) then
        model:BreakJoints()
        hum0.Health = 0
    end
    if antirespawn then
        respawnrequest()
    end
end)
sg:SetCore("ResetButtonCallback", rb)

tdelay(0, function()
    while c do
        if hum0 and hum1 then
            hum1.Jump = hum0.Jump
        end
        wait()
    end
    sg:SetCore("ResetButtonCallback", true)
end)

R15toR6 = R15toR6 and hum1 and (hum1.RigType == Enum.HumanoidRigType.R15)
if R15toR6 then
    local part = gp(c, "HumanoidRootPart", "BasePart") or gp(c, "UpperTorso", "BasePart") or gp(c, "LowerTorso", "BasePart") or gp(c, "Head", "BasePart") or c:FindFirstChildWhichIsA("BasePart")
    if part then
        local cfr = part.CFrame
        local R6parts = { 
            head = {
                Name = "Head",
                Size = v3(2, 1, 1),
                R15 = {
                    Head = 0
                }
            },
            torso = {
                Name = "Torso",
                Size = v3(2, 2, 1),
                R15 = {
                    UpperTorso = 0.2,
                    LowerTorso = -0.8
                }
            },
            root = {
                Name = "HumanoidRootPart",
                Size = v3(2, 2, 1),
                R15 = {
                    HumanoidRootPart = 0
                }
            },
            leftArm = {
                Name = "Left Arm",
                Size = v3(1, 2, 1),
                R15 = {
                    LeftHand = -0.849,
                    LeftLowerArm = -0.174,
                    LeftUpperArm = 0.415
                }
            },
            rightArm = {
                Name = "Right Arm",
                Size = v3(1, 2, 1),
                R15 = {
                    RightHand = -0.849,
                    RightLowerArm = -0.174,
                    RightUpperArm = 0.415
                }
            },
            leftLeg = {
                Name = "Left Leg",
                Size = v3(1, 2, 1),
                R15 = {
                    LeftFoot = -0.85,
                    LeftLowerLeg = -0.29,
                    LeftUpperLeg = 0.49
                }
            },
            rightLeg = {
                Name = "Right Leg",
                Size = v3(1, 2, 1),
                R15 = {
                    RightFoot = -0.85,
                    RightLowerLeg = -0.29,
                    RightUpperLeg = 0.49
                }
            }
        }
        for i, v in pairs(c:GetChildren()) do
            if v:IsA("BasePart") then
                for i1, v1 in pairs(c:GetChildren()) do
                    if v1:IsA("Motor6D") then
                        v1.Part0 = nil
                    end
                end
            end
        end
        part.Archivable = true
        for i, v in pairs(R6parts) do
            local part = part:Clone()
            part:ClearAllChildren()
            part.Name, part.Size, part.CFrame, part.Anchored, part.Transparency, part.CanCollide = v.Name, v.Size, cfr, false, 1, false
            for i1, v1 in pairs(v.R15) do
                local R15part = gp(c, i1, "BasePart")
                local att = gp(R15part, "att1_" .. i1, "Attachment")
                if R15part then
                    local weld = Instance.new("Weld")
                    weld.Part0, weld.Part1, weld.C0, weld.C1, weld.Name = part, R15part, cf(0, v1, 0), cf_0, "Weld_" .. i1
                    weld.Parent = R15part
                    R15part.Massless, R15part.Name = true, "R15_" .. i1
                    R15part.Parent = part
                    if att then
                        att.Position = v3(0, v1, 0)
                        att.Parent = part
                    end
                end
            end
            part.Parent = c
            R6parts[i] = part
        end
        local R6joints = {
            neck = {
                Parent = R6parts.torso,
                Name = "Neck",
                Part0 = R6parts.torso,
                Part1 = R6parts.head,
                C0 = cf(0, 1, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
                C1 = cf(0, -0.5, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
            },
            rootJoint = {
                Parent = R6parts.root,
                Name = "RootJoint" ,
                Part0 = R6parts.root,
                Part1 = R6parts.torso,
                C0 = cf(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0),
                C1 = cf(0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 1, -0)
            },
            rightShoulder = {
                Parent = R6parts.torso,
                Name = "Right Shoulder",
                Part0 = R6parts.torso,
                Part1 = R6parts.rightArm,
                C0 = cf(1, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
                C1 = cf(-0.5, 0.5, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0)
            },
            leftShoulder = {
                Parent = R6parts.torso,
                Name = "Left Shoulder",
                Part0 = R6parts.torso,
                Part1 = R6parts.leftArm,
                C0 = cf(-1, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
                C1 = cf(0.5, 0.5, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
            },
            rightHip = {
                Parent = R6parts.torso,
                Name = "Right Hip",
                Part0 = R6parts.torso,
                Part1 = R6parts.rightLeg,
                C0 = cf(1, -1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0),
                C1 = cf(0.5, 1, 0, 0, 0, 1, 0, 1, -0, -1, 0, 0)
            },
            leftHip = {
                Parent = R6parts.torso,
                Name = "Left Hip" ,
                Part0 = R6parts.torso,
                Part1 = R6parts.leftLeg,
                C0 = cf(-1, -1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0),
                C1 = cf(-0.5, 1, 0, 0, 0, -1, 0, 1, 0, 1, 0, 0)
            }
        }
        for i, v in pairs(R6joints) do
            local joint = Instance.new("Motor6D")
            for prop, val in pairs(v) do
                joint[prop] = val
            end
            R6joints[i] = joint
        end
        if hum1 then
            hum1.RigType, hum1.HipHeight = Enum.HumanoidRigType.R6, 0
        end
    end
end

local torso1 = torso
torso = gp(c, "Torso", "BasePart") or ((not R15toR6) and gp(c, torso.Name, "BasePart"))
if (typeof(hedafterneck) == "Instance") and head and torso and torso1 then
    local conNeck, conTorso, conTorso1 = nil, nil, nil
    local aligns = {}
    local function enableAligns()
        conNeck:Disconnect()
        conTorso:Disconnect()
        conTorso1:Disconnect()
        for i, v in pairs(aligns) do
            v.Enabled = true
        end
    end
    conNeck = hedafterneck.Changed:Connect(function(prop)
        if table.find({"Part0", "Part1", "Parent"}, prop) then
            enableAligns()
        end
    end)
    conTorso = torso:GetPropertyChangedSignal("Parent"):Connect(enableAligns)
    conTorso1 = torso1:GetPropertyChangedSignal("Parent"):Connect(enableAligns)
    for i, v in pairs(head:GetDescendants()) do
        if v:IsA("AlignPosition") or v:IsA("AlignOrientation") then
            i = tostring(i)
            aligns[i] = v
            v:GetPropertyChangedSignal("Parent"):Connect(function()
                aligns[i] = nil
            end)
            v.Enabled = false
        end
    end
end

local flingpart0 = gp(model, flingpart, "BasePart") or gp(gp(model, flingpart, "Accessory"), "Handle", "BasePart")
local flingpart1 = gp(c, flingpart, "BasePart") or gp(gp(c, flingpart, "Accessory"), "Handle", "BasePart")

local fling = function() end
if flingpart0 and flingpart1 then
    flingpart0:GetPropertyChangedSignal("Parent"):Connect(function()
        if not (flingpart0 and flingpart0.Parent) then
            flingpart0 = nil
            fling = function() end
        end
    end)
    flingpart0.Archivable = true
    flingpart1:GetPropertyChangedSignal("Parent"):Connect(function()
        if not (flingpart1 and flingpart1.Parent) then
            flingpart1 = nil
            fling = function() end
        end
    end)
    local att0 = gp(flingpart0, "att0_" .. flingpart0.Name, "Attachment")
    local att1 = gp(flingpart1, "att1_" .. flingpart1.Name, "Attachment")
    if att0 and att1 then
        att0:GetPropertyChangedSignal("Parent"):Connect(function()
            if not (att0 and att0.Parent) then
                att0 = nil
                fling = function() end
            end
        end)
        att1:GetPropertyChangedSignal("Parent"):Connect(function()
            if not (att1 and att1.Parent) then
                att1 = nil
                fling = function() end
            end
        end)
        local lastfling = nil
        local mouse = lp:GetMouse()
        fling = function(target, duration, rotVelocity)
            if typeof(target) == "Instance" then
                if target:IsA("BasePart") then
                    target = target.Position
                elseif target:IsA("Model") then
                    target = gp(target, "HumanoidRootPart", "BasePart") or gp(target, "Torso", "BasePart") or gp(target, "UpperTorso", "BasePart") or target:FindFirstChildWhichIsA("BasePart")
                    if target then
                        target = target.Position
                    else
                        return
                    end
                elseif target:IsA("Humanoid") then
                    target = target.Parent
                    if not (target and target:IsA("Model")) then
                        return
                    end
                    target = gp(target, "HumanoidRootPart", "BasePart") or gp(target, "Torso", "BasePart") or gp(target, "UpperTorso", "BasePart") or target:FindFirstChildWhichIsA("BasePart")
                    if target then
                        target = target.Position
                    else
                        return
                    end
                else
                    return
                end
            elseif typeof(target) == "CFrame" then
                target = target.Position
            elseif typeof(target) ~= "Vector3" then
                target = mouse.Hit
                if target then
                    target = target.Position
                else
                    return
                end
            end
            if target.Y < ws.FallenPartsDestroyHeight + 5 then
                target = v3(target.X, ws.FallenPartsDestroyHeight + 5, target.Z)
            end
            lastfling = target
            if type(duration) ~= "number" then
                duration = tonumber(duration) or 0.5
            end
            if typeof(rotVelocity) ~= "Vector3" then
                rotVelocity = v3(20000, 20000, 20000)
            end
            if not (target and flingpart0 and flingpart1 and att0 and att1) then
                return
            end
            flingpart0.Archivable = true
            local flingpart = flingpart0:Clone()
            flingpart.Transparency = 1
            flingpart.CanCollide = false
            flingpart.Name = "flingpart_" .. flingpart0.Name
            flingpart.Anchored = true
            flingpart.Velocity = v3_0
            flingpart.RotVelocity = v3_0
            flingpart.Position = target
            flingpart:GetPropertyChangedSignal("Parent"):Connect(function()
                if not (flingpart and flingpart.Parent) then
                    flingpart = nil
                end
            end)
            flingpart.Parent = flingpart1
            if flingpart0.Transparency > 0.5 then
                flingpart0.Transparency = 0.5
            end
            att1.Parent = flingpart
            local con = nil
            local rotchg = v3(0, rotVelocity.Unit.Y * -1000, 0)
            con = heartbeat:Connect(function(delta)
                if target and (lastfling == target) and flingpart and flingpart0 and flingpart1 and att0 and att1 then
                    flingpart.Orientation += rotchg * delta
                    flingpart0.RotVelocity = rotVelocity
                else
                    con:Disconnect()
                end
            end)
            if alignmode ~= 4 then
                local con = nil
                con = renderstepped:Connect(function()
                    if flingpart0 and target then
                        flingpart0.RotVelocity = v3_0
                    else
                        con:Disconnect()
                    end
                end)
            end
            twait(duration)
            if lastfling ~= target then
                if flingpart then
                    if att1 and (att1.Parent == flingpart) then
                        att1.Parent = flingpart1
                    end
                    pcall(destroy, flingpart)
                end
                return
            end
            target = nil
            if not (flingpart and flingpart0 and flingpart1 and att0 and att1) then
                return
            end
            flingpart0.RotVelocity = v3_0
            att1.Parent = flingpart1
            pcall(destroy, flingpart)
        end
    end
end

lp:GetMouse().Button1Down:Connect(fling) --click fling

local c = game:GetService("Players").LocalPlayer.Character
if not c then return end
local ws = game:GetService("Workspace")
c.AncestryChanged:Connect(function()
    if not c:IsDescendantOf(ws) then
        c = nil
    end
end)
local rs = game:GetService("RunService")
local stepped, renderstepped, heartbeat = rs.Stepped, rs.RenderStepped, rs.Heartbeat
local function gp(parent, name, classname)
    if typeof(parent) == "Instance" then
        for i, v in pairs(parent:GetChildren()) do
            if (v.Name == name) and v:IsA(classname) then
                return v
            end
        end
    end
    return nil
end

local function joint(name, parent, Part0, Part1, fakejoint)
    fakejoint.C0 = CFrame.new()
    fakejoint.C1 = CFrame.new()
    local joint = gp(parent, name, "Motor6D")
    if joint then
        fakejoint.C0 = joint.C0
        fakejoint.C1 = joint.C1
    end
    local con = nil
    con = stepped:Connect(function()
        if not c then
            return con:Disconnect()
        end
        local fix = nil
        fix = function()
            if not joint then 
                joint = Instance.new("Motor6D")
                joint.Changed:Connect(fix)
                joint.Destroying:Connect(function() joint = nil end)
            end
            joint.Part0 = Part0
            joint.Part1 = Part1
            joint.C0 = fakejoint.C0
            joint.C1 = fakejoint.C1
            joint.Parent = parent
        end
        fix()
    end)
end

local function part(name)
    local part = gp(c, name, "BasePart")
    if not part then
        part = Instance.new("Part")
        part.Name = name
        part.Transparency = 1
        part.CanCollide = false
        part.Massless = true
        part.Size = Vector3.new(1, 1, 1)
        part.Parent = c
    end
    local size = part.Size
    part.Destroying:Connect(function()
        part = nil
        c = nil
    end)
    local con = nil
    con = stepped:Connect(function()
        if not part then
            return con:Disconnect()
        end
        part.Anchored = false
        part.Name = name
        part.Size = size
        part.CanQuery = false
        part.CanTouch = false
        part.Parent = c
    end)
    return part
end

local Torso = part("Torso")
local RightArm = part("Right Arm")
local LeftArm = part("Left Arm")
local LeftLeg = part("Left Leg")
local RightLeg = part("Right Leg")
local Head = part("Head")
local HumanoidRootPart = part("HumanoidRootPart")

local RootJoint = {}
local RightShoulder = {}
local LeftShoulder = {}
local RightHip = {}
local LeftHip = {}
local Neck = {}

joint("Neck", Torso, Torso, Head, Neck)
joint("RootJoint", HumanoidRootPart, HumanoidRootPart, Torso, RootJoint)
joint("Right Shoulder", Torso, Torso, RightArm, RightShoulder)
joint("Left Shoulder", Torso, Torso, LeftArm, LeftShoulder)
joint("Right Hip", Torso, Torso, RightLeg, RightHip)
joint("Left Hip", Torso, Torso, LeftLeg, LeftHip)

local animate = gp(c, "Animate", "LocalScript")
if animate then
    animate.Disabled = true
end

local hum = c:FindFirstChildOfClass("Humanoid") or Instance.new("Humanoid", c)
local states = {
    [0]=false,[8]=true,
    [10]=false,[12]=false,
    [11]=false,[1]=false,
    [2]=true,[3]=true,
    [7]=true,[6]=false,
    [5]=true,[13]=false,
    [14]=false,[15]=false,
    [4]=false,[16]=false
}
for i, v in pairs(states) do
    hum:SetStateEnabled(i, v)
end
for i, v in pairs(hum:GetPlayingAnimationTracks()) do
    v:Stop()
end
hum.RigType = Enum.HumanoidRigType.R6
hum.BreakJointsOnDeath = false
hum.RequiresNeck = false
hum.MaxHealth = 0
hum.Health = 0
hum:ChangeState(8)

local modes = {
    z = "lay",
    x = "dam",
    c = "pus",
    q = "nop",
}
for i, v in pairs(modes) do
    if type(i) == "string" then
        modes[Enum.KeyCode[i:upper()]] = v
    end
end
local uis, mode = game:GetService("UserInputService"), ""
uis.InputBegan:Connect(function(key)
    if uis:GetFocusedTextBox() then return end
    key = key.KeyCode
    if mode == modes[key] then
        mode = ""
    else
        mode = modes[key] or mode
    end
end)

local cf, v3, euler, sin, sine, abs = CFrame.new, Vector3.new, CFrame.fromEulerAnglesXYZ, math.sin, 0, math.abs
local con = nil
con = renderstepped:Connect(function(deltaTime)
    if not c then
        return con:Disconnect()
    end
    local vel = HumanoidRootPart.Velocity
    sine += deltaTime
    deltaTime *= 10
    if vel.Magnitude > 2 then
        if abs(vel.X) + abs(vel.Z) > abs(vel.Y) then -- walk
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 18
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = 130
            
            local cf, angles, sin = CFrame.new, CFrame.Angles, math.sin  RightHip.C0 = RightHip.C0:Lerp(cf(2, -1 - 0.2 * sin(sine * 5), 0.5 * sin(sine * 4)) * angles(0.7853981633974483 - 0.9773843811168246 * sin(sine * 4), 1.5707963267948966, 0), deltaTime)  RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, 0.5 - 0.2 * sin(sine * 5), 0) * angles(-0.5934119456780721 * sin(sine * 4), 1.5707963267948966, 0), deltaTime)  RootJoint.C0 = RootJoint.C0:Lerp(cf(0, -0.64 + 0.2 * sin(sine * 6), 0) * angles(-1.5707963267948966, 0, 3.141592653589793), deltaTime)  LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, 0.5 - 0.2 * sin(sine * 5), 0) * angles(1.0122909661567112 * sin(sine * 4), -1.5707963267948966, 0), deltaTime)  Neck.C0 = Neck.C0:Lerp(cf(0, 1, 0) * angles(-2.181661564992912 - 0.6108652381980153 * sin(sine * 3), 0, 3.141592653589793), deltaTime)  LeftHip.C0 = LeftHip.C0:Lerp(cf(-2, -0.75 - 0.3 * sin(sine * 5), -1 * sin(sine * 4)) * angles(0.7853981633974483 + 0.8726646259971648 * sin(sine * 4), -1.5707963267948966, 0), deltaTime)  --RightLeg,2,0,0,0.5,45,-56,0,4,-1,-0.2,0,5,90,0,0,0.5,0,0.5,0,4,0,0,0,0.5,RightArm,1,0,0,0.5,,-34,0,4,0.5,-0.2,0,5,90,0,0,0.5,0,0,0,0.5,0,0,0,0.5,Torso,0,0,0,0.5,-90,0,0,0.5,-0.64,0.2,0,6,-0,0,0,0.5,0,0,0,0.5,180,0,0,0.5,LeftArm,-1,0,0,0.5,-0,58,0,4,0.5,-0.2,0,5,-90,0,0,0.5,0,0,0,0.5,0,0,0,0.5,Head,0,0,0,0.5,-125,-35,0,3,1,0,0,0.5,-0,0,0,0.5,0,0,0,0.5,180,0,0,0.5,LeftLeg,-2,0,0,0.5,45,50,0,4,-0.75,-0.3,0,5,-90,0,0,0.5,0,-1,0,4,0,0,0,0.5
            
        elseif vel.Y > 0 then -- jump
            
            local cf, angles, sin = CFrame.new, CFrame.Angles, math.sin  RootJoint.C0 = RootJoint.C0:Lerp(cf(0, 1, 0) * angles(-1.3089969389957472, 0, 3.141592653589793), deltaTime)  RightHip.C0 = RightHip.C0:Lerp(cf(2, -1 + 0.2 * sin(sine * 2), 1.2) * angles(0.06981317007977318 + 0.17453292519943295 * sin(sine * 2), 1.5707963267948966, 0), deltaTime)  RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, 0.5, 0) * angles(-0.7853981633974483, 1.5707963267948966, 0), deltaTime)  LeftHip.C0 = LeftHip.C0:Lerp(cf(-2, -1, 0.4 + 0.12 * sin(sine * -2.4)) * angles(-0.08726646259971647 - 0.20943951023931956 * sin(sine * 2), -1.5707963267948966, 0), deltaTime)  LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, 0.5, 0) * angles(-0.20943951023931956 + 0.20943951023931956 * sin(sine * 2), -1.5707963267948966, 0), deltaTime)  Neck.C0 = Neck.C0:Lerp(cf(0, 1, 0) * angles(-1.5707963267948966, 0, 3.141592653589793), deltaTime)  --Torso,0,0,0,2,-75,0,0,2,1,0,0,2,-0,0,0,2,0,0,0,2,180,0,0,2,RightLeg,2,0,0,2,4,10,0,2,-1,0.2,0,2,90,0,0,2,1.2,0,0,2,0,0,0,2,RightArm,1,0,0,2,-45,0,0,2,0.5,0,0,2,90,0,0,2,0,0,0,2,0,0,0,2,LeftLeg,-2,0,0,2,-5,-12,0,2,-1,0,0,2,-90,0,0,2,0.4,0.12,0,-2.4,0,0,0,2,LeftArm,-1,0,0,2,-12,12,0,2,0.5,0,0,2,-90,0,0,2,0,0,0,2,0,0,0,2,Head,0,0,0,2,-90,0,0,2,1,0,0,2,-0,0,0,2,0,0,0,2,180,0,0,2
            
        else -- fall
            
local cf, angles, sin = CFrame.new, CFrame.Angles, math.sin  RootJoint.C0 = RootJoint.C0:Lerp(cf(0, -1, 0) * angles(-2.181661564992912, 0, 3.141592653589793), deltaTime)  RightHip.C0 = RightHip.C0:Lerp(cf(2, -1 + 0.2 * sin(sine * 2), 1.2) * angles(0.06981317007977318 + 0.17453292519943295 * sin(sine * 2), 1.5707963267948966, 0), deltaTime)  RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, 0.5, 0) * angles(-0.7853981633974483, 1.5707963267948966, 0), deltaTime)  LeftHip.C0 = LeftHip.C0:Lerp(cf(-2, -0.5, -0.5) * angles(2.181661564992912, -1.5707963267948966, 0), deltaTime)  LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, 0.5, 0) * angles(0.9773843811168246, -1.5707963267948966, 0), deltaTime)  Neck.C0 = Neck.C0:Lerp(cf(0, 1, 0) * angles(-1.5707963267948966, 0, 3.141592653589793), deltaTime)  --Torso,0,0,0,2,-125,0,0,2,-1,0,0,2,-0,0,0,2,0,0,0,2,180,0,0,2,RightLeg,2,0,0,2,4,10,0,2,-1,0.2,0,2,90,0,0,2,1.2,0,0,2,0,0,0,2,RightArm,1,0,0,2,-45,0,0,2,0.5,0,0,2,90,0,0,2,0,0,0,2,0,0,0,2,LeftLeg,-2,0,0,2,125,0,0,2,-0.5,0,0,2,-90,0,0,2,-0.5,0,0,-2.4,0,0,0,2,LeftArm,-1,0,0,2,56,,0,2,0.5,0,0,2,-90,0,0,2,0,0r,0,2,0,0,0,2,Head,0,0,0,2,-90,0,0,2,1,0,0,2,-0,0,0,2,0,0,0,2,180,0,0,2
            
        end
    else --idle
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 18
        
        if mode == "" then
            
local cf, angles, sin = CFrame.new, CFrame.Angles, math.sin  Neck.C0 = Neck.C0:Lerp(cf(0, 1.2, 0) * angles(-2.234021442552742 - 0.03490658503988659 * sin(sine * 1), -0.08726646259971647 * sin(sine * 1), 3.141592653589793), deltaTime)  RootJoint.C0 = RootJoint.C0:Lerp(cf(0, -1 + 0.1 * sin(sine * 1), 0) * angles(-1.5707963267948966, 0, 3.141592653589793), deltaTime)  RightHip.C0 = RightHip.C0:Lerp(cf(2, -1 - 0.1 * sin(sine * 1), 0) * angles(0.9773843811168246 - 0.03490658503988659 * sin(sine * 1), 1.5707963267948966, 0.2617993877991494), deltaTime)  LeftHip.C0 = LeftHip.C0:Lerp(cf(-2, -1 - 0.1 * sin(sine * 1), 1) * angles(1.1868238913561442 - 0.017453292519943295 * sin(sine * 1), -1.5707963267948966, 0), deltaTime)  RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, 0.5, 0) * angles(0, 1.5707963267948966, 0), deltaTime)  LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, 0.5 - 0.1 * sin(sine * 1), 0) * angles(-0.6108652381980153 - 0.017453292519943295 * sin(sine * 1), -1.5707963267948966, 0), deltaTime)  --Head,0,0,0,1,-128,-2,0,1,1.2,0,0,1,-0,-5,0,1,-0,0,0,1,180,0,0,1,Torso,0,0,0,1,-90,0,0,1,-1,0.1,0,1,-0,0,0,1,0,0,0,1,180,0,0,1,RightLeg,2,0,0,1,56,-2,0,1,-1,-0.1,0,1,90,0,0,1,0,0,0,1,15,0,0,1,LeftLeg,-2,0,0,1,68,-1,0,1,-1,-0.1,0,1,-90,0,0,1,1,0,0,1,0,0,0,1,RightArm,1,0,0,1,0,0,0,1,0.5,0,0,1,90,0,0,1,0,0,0,1,0,0,0,1,LeftArm,-1,0,0,1,-35,-1,0,1,0.5,-0.1,0,1,-90,0,0,1,0,0,0,1,0,0,0,1

        elseif mode == "lay" then
        
local cf, angles, sin = CFrame.new, CFrame.Angles, math.sin  RootJoint.C0 = RootJoint.C0:Lerp(cf(0, -1.5 + 0.1 * sin(sine * 1), 0) * angles(-1.4835298641951802, 0, 3.141592653589793), deltaTime)  RightHip.C0 = RightHip.C0:Lerp(cf(2, 0.7 - 0.1 * sin(sine * 1), -1.8) * angles(2.007128639793479 + 0.2617993877991494 * sin(sine * 1), 1.5707963267948966 + 0.03490658503988659 * sin(sine * 1), 0), deltaTime)  LeftHip.C0 = LeftHip.C0:Lerp(cf(-2, -1 - 0.1 * sin(sine * 1), 0.3) * angles(1.4835298641951802, -1.1519173063162575, 0), deltaTime)  RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, 0.5 - 0.1 * sin(sine * 1), -0.5) * angles(1.6755160819145565, 1.7278759594743862, 0), deltaTime)  Neck.C0 = Neck.C0:Lerp(cf(0, 1, 0) * angles(-1.5707963267948966 + 0.2617993877991494 * sin(sine * 1), 0, 3.141592653589793), deltaTime)  LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, 0.5 - 0.1 * sin(sine * 1), 0) * angles(-0.2792526803190927, -1.5707963267948966, 0), deltaTime)  --Torso,0,0,0,1,-85,0,0,1,-1.5,0.1,0,1,-0,0,0,1,0,0,0,1,180,0,0,1,RightLeg,2,0,0,1,115,15,0,1,0.7,-0.1,0,1,90,2,0,1,-1.8,0,0,1,0,0,0,1,LeftLeg,-2,0,0,1,85,0,0,1,-1,-0.1,0,1,-66,0,0,1,0.3,0,0,1,0,0,0,1,RightArm,1,0,0,1,96,0,0,1,0.5,-0.1,0,1,99,0,0,1,-0.5,0,0,1,0,0,0,1,Head,0,0,0,1,-90,15,0,1,1,0,0,1,-0,0,0,1,0,0,0,1,180,0,0,1,LeftArm,-1,0,0,1,-16,0,0,1,0.5,-0.1,0,1,-90,0,0,1,0,0,0,1,0,0,0,1

        elseif mode == "dam" then
        
        local cf, angles, sin = CFrame.new, CFrame.Angles, math.sin  RootJoint.C0 = RootJoint.C0:Lerp(cf(0, -2 + 0.1 * sin(sine * 2), 0) * angles(-1.3089969389957472, 0, 3.141592653589793), deltaTime)  LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, 0.5 - 0.1 * sin(sine * 2), 0) * angles(0.7330382858376184, -1.5707963267948966, 0), deltaTime)  RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, 0.5 - 0.1 * sin(sine * 2), 0) * angles(-0.20943951023931956, 1.5707963267948966, 0), deltaTime)  Neck.C0 = Neck.C0:Lerp(cf(0, 1, 0) * angles(-1.5184364492350666 + 0.2617993877991494 * sin(sine * 2), 0.08726646259971647 * sin(sine * 2), 3.141592653589793), deltaTime)  RightHip.C0 = RightHip.C0:Lerp(cf(2, -1 - 0.1 * sin(sine * 2), -0.3) * angles(1.4835298641951802, 1.5707963267948966, 0), deltaTime)  LeftHip.C0 = LeftHip.C0:Lerp(cf(-2, -1 - 0.1 * sin(sine * 2), -1) * angles(2.181661564992912, -0.15707963267948966, 0.8726646259971648 * sin(sine * 2)), deltaTime)  --Torso,0,0,0,2,-75,0,0,2,-2,0.1,0,2,-0,0,0,2,0,0,0,2,180,0,0,2,LeftArm,-1,0,0,2,42,0,0,2,0.5,-0.1,0,2,-90,0,0,2,0,0,0,2,0,0,0,2,RightArm,1,0,0,2,-12,0,0,2,0.5,-0.1,0,2,90,0,0,2,0,0,0,2,0,0,0,2,Head,0,0,0,2,-87,15,0,2,1,0,0,2,0,5,0,2,0,0,0,2,180,0,0,2,RightLeg,2,0,0,2,85,0,0,2,-1,-0.1,0,2,90,0,0,2,-0.3,0,0,2,0,0,0,2,LeftLeg,-2,0,0,2,125,0,0,2,-1,-0.1,0,2,-9,0,0,2,-1,0,0,2,0,50,0,2
    
            elseif mode == "pus" then
        
local cf, angles, sin = CFrame.new, CFrame.Angles, math.sin  RootJoint.C0 = RootJoint.C0:Lerp(cf(0, -1 + 1 * sin(sine * 2), 0) * angles(-2.722713633111154, 0, 3.141592653589793), deltaTime)  RightHip.C0 = RightHip.C0:Lerp(cf(2, 0, -0.8 - 1 * sin(sine * 2)) * angles(2.007128639793479 - 0.2617993877991494 * sin(sine * 2), 1.5707963267948966, 0), deltaTime)  Neck.C0 = Neck.C0:Lerp(cf(0, 1, 0) * angles(-2.181661564992912 + 0.2617993877991494 * sin(sine * 2), 0, 3.141592653589793), deltaTime)  LeftHip.C0 = LeftHip.C0:Lerp(cf(-2, 0.2, -1 - 1 * sin(sine * 2)) * angles(1.6580627893946132 - 0.2617993877991494 * sin(sine * 2), -1.5707963267948966, 0), deltaTime)  LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, 0, 0.6 - 1 * sin(sine * 2)) * angles(1.6755160819145565 + 0.22689280275926285 * sin(sine * 2), -1.5707963267948966, 0), deltaTime)  RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, 0, 1 - 1 * sin(sine * 2)) * angles(1.4835298641951802 + 0.2617993877991494 * sin(sine * 2), 1.5707963267948966, 0), deltaTime)  --Torso,0,0,0,2,-156,0,0,2,-1,1,0,2,-0,0,0,2,0,0,0,2,180,0,0,2,RightLeg,2,0,0,2,115,-15,0,2,0,0,0,2,90,0,0,2,-0.8,-1,0,2,0,0,0,2,Head,0,0,0,2,-125,15,0,2,1,0,0,2,-0,0,0,2,0,0,0,2,180,0,0,2,LeftLeg,-2,0,0,2,95,-15,0,2,0.2,0,0,2,-90,0,0,2,-1,-1,0,2,0,0,0,2,LeftArm,-1,0,0,2,96,13,0,2,0,0,0,2,-90,0,0,2,0.6,-1,0,2,0,0,0,2,RightArm,1,0,0,2,85,15,0,2,0,0,0,2,90,0,0,2,1,-1,0,2,0,0,0,2

        elseif mode == "nop" then
        
local cf, angles, sin = CFrame.new, CFrame.Angles, math.sin  RootJoint.C0 = RootJoint.C0:Lerp(cf(0, -2, 0) * angles(-2.722713633111154, 0, 3.141592653589793), deltaTime)  RightHip.C0 = RightHip.C0:Lerp(cf(2, 0, -0.8) * angles(2.8797932657906435, 1.5707963267948966, 0), deltaTime)  Neck.C0 = Neck.C0:Lerp(cf(0, 1, 0) * angles(-2.181661564992912 + 0.2617993877991494 * sin(sine * 2), 0, 3.141592653589793), deltaTime)  LeftHip.C0 = LeftHip.C0:Lerp(cf(-2, 0.2, -1) * angles(2.722713633111154, -1.5707963267948966, 0), deltaTime)  LeftShoulder.C0 = LeftShoulder.C0:Lerp(cf(-1, 0, 0.6) * angles(1.6755160819145565, -1.5707963267948966, 0), deltaTime)  RightShoulder.C0 = RightShoulder.C0:Lerp(cf(1, 0, 1) * angles(1.4835298641951802, 1.5707963267948966, 0), deltaTime)  --Torso,0,0,0,2,-156,0,0,2,-2,0,0,2,-0,0,0,2,0,0,0,2,180,0,0,2,RightLeg,2,0,0,2,165,0,0,2,0,0,0,2,90,0,0,2,-0.8,0,0,2,0,0,0,2,Head,0,0,0,2,-125,15,0,2,1,0,0,2,-0,0,0,2,0,0,0,2,180,0,0,2,LeftLeg,-2,0,0,2,156,0,0,2,0.2,0,0,2,-90,0,0,2,-1,0,0,2,0,0,0,2,LeftArm,-1,0,0,2,96,0,0,2,0,0,0,2,-90,0,0,2,0.6,0,0,2,0,0,0,2,RightArm,1,0,0,2,85,0,0,2,0,0,0,2,90,0,0,2,1,0,0,2,0,0,0,2


                end
        
    end
end)
